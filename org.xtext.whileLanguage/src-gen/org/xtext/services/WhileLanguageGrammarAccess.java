/*
 * generated by Xtext 2.15.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WhileLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.Model");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTextProgramParserRuleCall_0 = (RuleCall)cTextAssignment.eContents().get(0);
		
		///*Model:
		//	program += Program;	
		//	
		//Program:
		//	(Function)+;
		//
		//Function:
		//	'function' SYMBOL ':' Definition;
		//	
		//Definition:
		//	'read' Input '%' Commands '%' 'write' Output;
		//	
		//Input:
		//	VARIABLE (',' VARIABLE)*;
		//	
		//Output:
		//	VARIABLE (',' VARIABLE)*;
		//		
		//Commands :
		//	Command (';' Command)*;
		//	
		//Command:
		//	'nop' |
		//	Vars ':=' Exprs |
		//	'while' CommandBody |
		//	'for' CommandBody |
		//	'if' Expr 'then' Commands ('else' Commands)? 'fi' |
		//	'foreach' Expr 'in' CommandBody;
		//
		//CommandBody :
		//	Expr 'do' Commands 'od';
		//	
		//Vars:
		//	VARIABLE (',' VARIABLE)*;
		//	
		//Exprs:
		//	Expr (',' Expr)*;
		//	
		//Expr:
		//	ExprAnd;
		//	
		//LExpr:
		//	(Expr)+;
		//	
		//ExprSimple:
		//	'nil' | VARIABLE | SYMBOL | 
		//	'(' 'cons' LExpr ')' | '(' 'list' LExpr ')' |
		//	'(' 'hd' Expr ')' | '(' 'tl' Expr ')' |
		//	(=> '(' SYMBOL LExpr ')');
		//	
		//ExprAnd:
		//	ExprOr ('and' ExprOr)*;
		//	
		//ExprOr:
		//	ExprNot ('or' ExprNot)*;
		//	
		//ExprNot:
		//	'not'? ExprEq;
		//	
		//ExprEq:
		//	ExprSimple ('=?' ExprSimple)? | '(' Expr ')';
		//	
		//terminal SYMBOL: ('a'..'z') ('0'..'9'|'a'..'z'|'A'..'Z')* ((('-'|'+'|'.'|'/'|'_'|'&') | '->') ('0'..'9'|'a'..'z'|'A'..'Z')+)* ('?'|'!')?;
		//terminal VARIABLE : ('A'..'Z') ('0'..'9'|'a'..'z'|'A'..'Z')* ((('-'|'+'|'.'|'/'|'_'|'&') | '->') ('0'..'9'|'a'..'z'|'A'..'Z')+)* ('?'|'!')?;
		//
		//*/ Model:
		//	text=Program;
		@Override public ParserRule getRule() { return rule; }
		
		//text=Program
		public Assignment getTextAssignment() { return cTextAssignment; }
		
		//Program
		public RuleCall getTextProgramParserRuleCall_0() { return cTextProgramParserRuleCall_0; }
	}
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFFunctionParserRuleCall_0_0 = (RuleCall)cFAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCRTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cPAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPProgramParserRuleCall_1_1_0 = (RuleCall)cPAssignment_1_1.eContents().get(0);
		
		//Program:
		//	f+=Function* (CR p=Program)?;
		@Override public ParserRule getRule() { return rule; }
		
		//f+=Function* (CR p=Program)?
		public Group getGroup() { return cGroup; }
		
		//f+=Function*
		public Assignment getFAssignment_0() { return cFAssignment_0; }
		
		//Function
		public RuleCall getFFunctionParserRuleCall_0_0() { return cFFunctionParserRuleCall_0_0; }
		
		//(CR p=Program)?
		public Group getGroup_1() { return cGroup_1; }
		
		//CR
		public RuleCall getCRTerminalRuleCall_1_0() { return cCRTerminalRuleCall_1_0; }
		
		//p=Program
		public Assignment getPAssignment_1_1() { return cPAssignment_1_1; }
		
		//Program
		public RuleCall getPProgramParserRuleCall_1_1_0() { return cPProgramParserRuleCall_1_1_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSYMBOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDDefinitionParserRuleCall_3_0 = (RuleCall)cDAssignment_3.eContents().get(0);
		
		//Function:
		//	'function' SYMBOL ':' d=Definition;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' SYMBOL ':' d=Definition
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_1() { return cSYMBOLTerminalRuleCall_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//d=Definition
		public Assignment getDAssignment_3() { return cDAssignment_3; }
		
		//Definition
		public RuleCall getDDefinitionParserRuleCall_3_0() { return cDDefinitionParserRuleCall_3_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIInputParserRuleCall_1_0 = (RuleCall)cIAssignment_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCCommandsParserRuleCall_3_0 = (RuleCall)cCAssignment_3.eContents().get(0);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cWriteKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOOutputParserRuleCall_6_0 = (RuleCall)cOAssignment_6.eContents().get(0);
		
		//Definition:
		//	'read' i=Input
		//	'%' c=Commands
		//	'%' 'write' o=Output;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' i=Input '%' c=Commands '%' 'write' o=Output
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//i=Input
		public Assignment getIAssignment_1() { return cIAssignment_1; }
		
		//Input
		public RuleCall getIInputParserRuleCall_1_0() { return cIInputParserRuleCall_1_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
		
		//c=Commands
		public Assignment getCAssignment_3() { return cCAssignment_3; }
		
		//Commands
		public RuleCall getCCommandsParserRuleCall_3_0() { return cCCommandsParserRuleCall_3_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }
		
		//'write'
		public Keyword getWriteKeyword_5() { return cWriteKeyword_5; }
		
		//o=Output
		public Assignment getOAssignment_6() { return cOAssignment_6; }
		
		//Output
		public RuleCall getOOutputParserRuleCall_6_0() { return cOOutputParserRuleCall_6_0; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVVARIABLETerminalRuleCall_0_0 = (RuleCall)cVAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cV2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cV2VARIABLETerminalRuleCall_1_1_0 = (RuleCall)cV2Assignment_1_1.eContents().get(0);
		
		//Input:
		//	v=VARIABLE (',' v2+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//v=VARIABLE (',' v2+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//v=VARIABLE
		public Assignment getVAssignment_0() { return cVAssignment_0; }
		
		//VARIABLE
		public RuleCall getVVARIABLETerminalRuleCall_0_0() { return cVVARIABLETerminalRuleCall_0_0; }
		
		//(',' v2+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//v2+=VARIABLE
		public Assignment getV2Assignment_1_1() { return cV2Assignment_1_1; }
		
		//VARIABLE
		public RuleCall getV2VARIABLETerminalRuleCall_1_1_0() { return cV2VARIABLETerminalRuleCall_1_1_0; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVVARIABLETerminalRuleCall_0_0 = (RuleCall)cVAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cV2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cV2VARIABLETerminalRuleCall_1_1_0 = (RuleCall)cV2Assignment_1_1.eContents().get(0);
		
		//Output:
		//	v=VARIABLE (',' v2+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//v=VARIABLE (',' v2+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//v=VARIABLE
		public Assignment getVAssignment_0() { return cVAssignment_0; }
		
		//VARIABLE
		public RuleCall getVVARIABLETerminalRuleCall_0_0() { return cVVARIABLETerminalRuleCall_0_0; }
		
		//(',' v2+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//v2+=VARIABLE
		public Assignment getV2Assignment_1_1() { return cV2Assignment_1_1; }
		
		//VARIABLE
		public RuleCall getV2VARIABLETerminalRuleCall_1_1_0() { return cV2VARIABLETerminalRuleCall_1_1_0; }
	}
	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.Commands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCCommandParserRuleCall_0_0 = (RuleCall)cCAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cC2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cC2CommandParserRuleCall_1_1_0 = (RuleCall)cC2Assignment_1_1.eContents().get(0);
		
		//Commands:
		//	c+=Command (';' c2+=Command)*;
		@Override public ParserRule getRule() { return rule; }
		
		//c+=Command (';' c2+=Command)*
		public Group getGroup() { return cGroup; }
		
		//c+=Command
		public Assignment getCAssignment_0() { return cCAssignment_0; }
		
		//Command
		public RuleCall getCCommandParserRuleCall_0_0() { return cCCommandParserRuleCall_0_0; }
		
		//(';' c2+=Command)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//c2+=Command
		public Assignment getC2Assignment_1_1() { return cC2Assignment_1_1; }
		
		//Command
		public RuleCall getC2CommandParserRuleCall_1_1_0() { return cC2CommandParserRuleCall_1_1_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNopAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNopNopKeyword_0_0 = (Keyword)cNopAssignment_0.eContents().get(0);
		private final Assignment cAssignAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAssignAssignParserRuleCall_1_0 = (RuleCall)cAssignAssignment_1.eContents().get(0);
		private final Assignment cWhileAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cWhileWhileParserRuleCall_2_0 = (RuleCall)cWhileAssignment_2.eContents().get(0);
		private final Assignment cForAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cForForParserRuleCall_3_0 = (RuleCall)cForAssignment_3.eContents().get(0);
		private final Assignment cIfAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cIfIfParserRuleCall_4_0 = (RuleCall)cIfAssignment_4.eContents().get(0);
		private final Assignment cForeachAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cForeachForeachParserRuleCall_5_0 = (RuleCall)cForeachAssignment_5.eContents().get(0);
		
		//Command:
		//	nop='nop' | assign=Assign | while=While | for=For | if=If | foreach=Foreach;
		@Override public ParserRule getRule() { return rule; }
		
		//nop='nop' | assign=Assign | while=While | for=For | if=If | foreach=Foreach
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//nop='nop'
		public Assignment getNopAssignment_0() { return cNopAssignment_0; }
		
		//'nop'
		public Keyword getNopNopKeyword_0_0() { return cNopNopKeyword_0_0; }
		
		//assign=Assign
		public Assignment getAssignAssignment_1() { return cAssignAssignment_1; }
		
		//Assign
		public RuleCall getAssignAssignParserRuleCall_1_0() { return cAssignAssignParserRuleCall_1_0; }
		
		//while=While
		public Assignment getWhileAssignment_2() { return cWhileAssignment_2; }
		
		//While
		public RuleCall getWhileWhileParserRuleCall_2_0() { return cWhileWhileParserRuleCall_2_0; }
		
		//for=For
		public Assignment getForAssignment_3() { return cForAssignment_3; }
		
		//For
		public RuleCall getForForParserRuleCall_3_0() { return cForForParserRuleCall_3_0; }
		
		//if=If
		public Assignment getIfAssignment_4() { return cIfAssignment_4; }
		
		//If
		public RuleCall getIfIfParserRuleCall_4_0() { return cIfIfParserRuleCall_4_0; }
		
		//foreach=Foreach
		public Assignment getForeachAssignment_5() { return cForeachAssignment_5; }
		
		//Foreach
		public RuleCall getForeachForeachParserRuleCall_5_0() { return cForeachForeachParserRuleCall_5_0; }
	}
	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVVarsParserRuleCall_0_0 = (RuleCall)cVAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEExprsParserRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		
		//Assign:
		//	v=Vars ':=' e=Exprs;
		@Override public ParserRule getRule() { return rule; }
		
		//v=Vars ':=' e=Exprs
		public Group getGroup() { return cGroup; }
		
		//v=Vars
		public Assignment getVAssignment_0() { return cVAssignment_0; }
		
		//Vars
		public RuleCall getVVarsParserRuleCall_0_0() { return cVVarsParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//e=Exprs
		public Assignment getEAssignment_2() { return cEAssignment_2; }
		
		//Exprs
		public RuleCall getEExprsParserRuleCall_2_0() { return cEExprsParserRuleCall_2_0; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEExprParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCCommandsParserRuleCall_3_0 = (RuleCall)cCAssignment_3.eContents().get(0);
		private final Keyword cOdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//While:
		//	'while' e=Expr 'do' c=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' e=Expr 'do' c=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//e=Expr
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//Expr
		public RuleCall getEExprParserRuleCall_1_0() { return cEExprParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//c=Commands
		public Assignment getCAssignment_3() { return cCAssignment_3; }
		
		//Commands
		public RuleCall getCCommandsParserRuleCall_3_0() { return cCCommandsParserRuleCall_3_0; }
		
		//'od'
		public Keyword getOdKeyword_4() { return cOdKeyword_4; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEExprParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCCommandsParserRuleCall_3_0 = (RuleCall)cCAssignment_3.eContents().get(0);
		private final Keyword cOdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//For:
		//	'for' e=Expr 'do' c=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'for' e=Expr 'do' c=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//e=Expr
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//Expr
		public RuleCall getEExprParserRuleCall_1_0() { return cEExprParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//c=Commands
		public Assignment getCAssignment_3() { return cCAssignment_3; }
		
		//Commands
		public RuleCall getCCommandsParserRuleCall_3_0() { return cCCommandsParserRuleCall_3_0; }
		
		//'od'
		public Keyword getOdKeyword_4() { return cOdKeyword_4; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEExprParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCCommandsParserRuleCall_3_0 = (RuleCall)cCAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cC2Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cC2CommandsParserRuleCall_4_1_0 = (RuleCall)cC2Assignment_4_1.eContents().get(0);
		private final Keyword cFiKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//If:
		//	'if' e=Expr 'then' c=Commands ('else' c2=Commands)? 'fi';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' e=Expr 'then' c=Commands ('else' c2=Commands)? 'fi'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//e=Expr
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//Expr
		public RuleCall getEExprParserRuleCall_1_0() { return cEExprParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//c=Commands
		public Assignment getCAssignment_3() { return cCAssignment_3; }
		
		//Commands
		public RuleCall getCCommandsParserRuleCall_3_0() { return cCCommandsParserRuleCall_3_0; }
		
		//('else' c2=Commands)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//c2=Commands
		public Assignment getC2Assignment_4_1() { return cC2Assignment_4_1; }
		
		//Commands
		public RuleCall getC2CommandsParserRuleCall_4_1_0() { return cC2CommandsParserRuleCall_4_1_0; }
		
		//'fi'
		public Keyword getFiKeyword_5() { return cFiKeyword_5; }
	}
	public class ForeachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.Foreach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEExprParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cE2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cE2ExprParserRuleCall_3_0 = (RuleCall)cE2Assignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCCommandsParserRuleCall_5_0 = (RuleCall)cCAssignment_5.eContents().get(0);
		private final Keyword cOdKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Foreach:
		//	'foreach' e=Expr 'in' e2=Expr 'do' c=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' e=Expr 'in' e2=Expr 'do' c=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//e=Expr
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//Expr
		public RuleCall getEExprParserRuleCall_1_0() { return cEExprParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//e2=Expr
		public Assignment getE2Assignment_3() { return cE2Assignment_3; }
		
		//Expr
		public RuleCall getE2ExprParserRuleCall_3_0() { return cE2ExprParserRuleCall_3_0; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//c=Commands
		public Assignment getCAssignment_5() { return cCAssignment_5; }
		
		//Commands
		public RuleCall getCCommandsParserRuleCall_5_0() { return cCCommandsParserRuleCall_5_0; }
		
		//'od'
		public Keyword getOdKeyword_6() { return cOdKeyword_6; }
	}
	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVVARIABLETerminalRuleCall_0_0 = (RuleCall)cVAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cV2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cV2VARIABLETerminalRuleCall_1_1_0 = (RuleCall)cV2Assignment_1_1.eContents().get(0);
		
		//Vars:
		//	v=VARIABLE (',' v2+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//v=VARIABLE (',' v2+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//v=VARIABLE
		public Assignment getVAssignment_0() { return cVAssignment_0; }
		
		//VARIABLE
		public RuleCall getVVARIABLETerminalRuleCall_0_0() { return cVVARIABLETerminalRuleCall_0_0; }
		
		//(',' v2+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//v2+=VARIABLE
		public Assignment getV2Assignment_1_1() { return cV2Assignment_1_1; }
		
		//VARIABLE
		public RuleCall getV2VARIABLETerminalRuleCall_1_1_0() { return cV2VARIABLETerminalRuleCall_1_1_0; }
	}
	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.Exprs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEExprParserRuleCall_0_0 = (RuleCall)cEAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cE2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cE2ExprParserRuleCall_1_1_0 = (RuleCall)cE2Assignment_1_1.eContents().get(0);
		
		//Exprs:
		//	e=Expr (',' e2+=Expr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//e=Expr (',' e2+=Expr)*
		public Group getGroup() { return cGroup; }
		
		//e=Expr
		public Assignment getEAssignment_0() { return cEAssignment_0; }
		
		//Expr
		public RuleCall getEExprParserRuleCall_0_0() { return cEExprParserRuleCall_0_0; }
		
		//(',' e2+=Expr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//e2+=Expr
		public Assignment getE2Assignment_1_1() { return cE2Assignment_1_1; }
		
		//Expr
		public RuleCall getE2ExprParserRuleCall_1_1_0() { return cE2ExprParserRuleCall_1_1_0; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.Expr");
		private final Assignment cEaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEaExprAndParserRuleCall_0 = (RuleCall)cEaAssignment.eContents().get(0);
		
		//Expr:
		//	ea=ExprAnd;
		@Override public ParserRule getRule() { return rule; }
		
		//ea=ExprAnd
		public Assignment getEaAssignment() { return cEaAssignment; }
		
		//ExprAnd
		public RuleCall getEaExprAndParserRuleCall_0() { return cEaExprAndParserRuleCall_0; }
	}
	public class ExprSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.ExprSimple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNilAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNilNilKeyword_0_0 = (Keyword)cNilAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVarVARIABLETerminalRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Assignment cSymAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSymSYMBOLTerminalRuleCall_2_0 = (RuleCall)cSymAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cConsKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cE3Assignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cE3LExprParserRuleCall_3_2_0 = (RuleCall)cE3Assignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cListKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cE4Assignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cE4LExprParserRuleCall_4_2_0 = (RuleCall)cE4Assignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cHdKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cE5Assignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cE5ExprParserRuleCall_5_2_0 = (RuleCall)cE5Assignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cTlKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cE6Assignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cE6ExprParserRuleCall_6_2_0 = (RuleCall)cE6Assignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//ExprSimple:
		//	nil='nil' | var=VARIABLE | sym=SYMBOL | '(' 'cons' e3=LExpr ')' | '(' 'list' e4=LExpr ')' | '(' 'hd' e5=Expr ')' |
		//	'(' 'tl' e6=Expr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//nil='nil' | var=VARIABLE | sym=SYMBOL | '(' 'cons' e3=LExpr ')' | '(' 'list' e4=LExpr ')' | '(' 'hd' e5=Expr ')' | '('
		//'tl' e6=Expr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//nil='nil'
		public Assignment getNilAssignment_0() { return cNilAssignment_0; }
		
		//'nil'
		public Keyword getNilNilKeyword_0_0() { return cNilNilKeyword_0_0; }
		
		//var=VARIABLE
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//VARIABLE
		public RuleCall getVarVARIABLETerminalRuleCall_1_0() { return cVarVARIABLETerminalRuleCall_1_0; }
		
		//sym=SYMBOL
		public Assignment getSymAssignment_2() { return cSymAssignment_2; }
		
		//SYMBOL
		public RuleCall getSymSYMBOLTerminalRuleCall_2_0() { return cSymSYMBOLTerminalRuleCall_2_0; }
		
		//'(' 'cons' e3=LExpr ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//'cons'
		public Keyword getConsKeyword_3_1() { return cConsKeyword_3_1; }
		
		//e3=LExpr
		public Assignment getE3Assignment_3_2() { return cE3Assignment_3_2; }
		
		//LExpr
		public RuleCall getE3LExprParserRuleCall_3_2_0() { return cE3LExprParserRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'(' 'list' e4=LExpr ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//'list'
		public Keyword getListKeyword_4_1() { return cListKeyword_4_1; }
		
		//e4=LExpr
		public Assignment getE4Assignment_4_2() { return cE4Assignment_4_2; }
		
		//LExpr
		public RuleCall getE4LExprParserRuleCall_4_2_0() { return cE4LExprParserRuleCall_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//'(' 'hd' e5=Expr ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//'hd'
		public Keyword getHdKeyword_5_1() { return cHdKeyword_5_1; }
		
		//e5=Expr
		public Assignment getE5Assignment_5_2() { return cE5Assignment_5_2; }
		
		//Expr
		public RuleCall getE5ExprParserRuleCall_5_2_0() { return cE5ExprParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//'(' 'tl' e6=Expr ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//'tl'
		public Keyword getTlKeyword_6_1() { return cTlKeyword_6_1; }
		
		//e6=Expr
		public Assignment getE6Assignment_6_2() { return cE6Assignment_6_2; }
		
		//Expr
		public RuleCall getE6ExprParserRuleCall_6_2_0() { return cE6ExprParserRuleCall_6_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }
	}
	public class ExprAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.ExprAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEoExprOrParserRuleCall_0_0 = (RuleCall)cEoAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEo2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEo2ExprOrParserRuleCall_1_1_0 = (RuleCall)cEo2Assignment_1_1.eContents().get(0);
		
		//ExprAnd:
		//	eo=ExprOr ('and' eo2+=ExprOr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//eo=ExprOr ('and' eo2+=ExprOr)*
		public Group getGroup() { return cGroup; }
		
		//eo=ExprOr
		public Assignment getEoAssignment_0() { return cEoAssignment_0; }
		
		//ExprOr
		public RuleCall getEoExprOrParserRuleCall_0_0() { return cEoExprOrParserRuleCall_0_0; }
		
		//('and' eo2+=ExprOr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//eo2+=ExprOr
		public Assignment getEo2Assignment_1_1() { return cEo2Assignment_1_1; }
		
		//ExprOr
		public RuleCall getEo2ExprOrParserRuleCall_1_1_0() { return cEo2ExprOrParserRuleCall_1_1_0; }
	}
	public class ExprOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.ExprOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEnExprNotParserRuleCall_0_0 = (RuleCall)cEnAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEn2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEn2ExprNotParserRuleCall_1_1_0 = (RuleCall)cEn2Assignment_1_1.eContents().get(0);
		
		//ExprOr:
		//	en=ExprNot ('or' en2+=ExprNot)*;
		@Override public ParserRule getRule() { return rule; }
		
		//en=ExprNot ('or' en2+=ExprNot)*
		public Group getGroup() { return cGroup; }
		
		//en=ExprNot
		public Assignment getEnAssignment_0() { return cEnAssignment_0; }
		
		//ExprNot
		public RuleCall getEnExprNotParserRuleCall_0_0() { return cEnExprNotParserRuleCall_0_0; }
		
		//('or' en2+=ExprNot)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'or'
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }
		
		//en2+=ExprNot
		public Assignment getEn2Assignment_1_1() { return cEn2Assignment_1_1; }
		
		//ExprNot
		public RuleCall getEn2ExprNotParserRuleCall_1_1_0() { return cEn2ExprNotParserRuleCall_1_1_0; }
	}
	public class ExprNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.ExprNot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNotKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cEAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cEExprEqParserRuleCall_0_1_0 = (RuleCall)cEAssignment_0_1.eContents().get(0);
		private final Assignment cE2Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cE2ExprEqParserRuleCall_1_0 = (RuleCall)cE2Assignment_1.eContents().get(0);
		
		//ExprNot:
		//	'not' e=ExprEq | e2=ExprEq;
		@Override public ParserRule getRule() { return rule; }
		
		//'not' e=ExprEq | e2=ExprEq
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'not' e=ExprEq
		public Group getGroup_0() { return cGroup_0; }
		
		//'not'
		public Keyword getNotKeyword_0_0() { return cNotKeyword_0_0; }
		
		//e=ExprEq
		public Assignment getEAssignment_0_1() { return cEAssignment_0_1; }
		
		//ExprEq
		public RuleCall getEExprEqParserRuleCall_0_1_0() { return cEExprEqParserRuleCall_0_1_0; }
		
		//e2=ExprEq
		public Assignment getE2Assignment_1() { return cE2Assignment_1; }
		
		//ExprEq
		public RuleCall getE2ExprEqParserRuleCall_1_0() { return cE2ExprEqParserRuleCall_1_0; }
	}
	public class ExprEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.ExprEq");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cEAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cEExprSimpleParserRuleCall_0_0_0 = (RuleCall)cEAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cEqualsSignQuestionMarkKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cE2Assignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cE2ExprSimpleParserRuleCall_0_1_1_0 = (RuleCall)cE2Assignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSYMBOLTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cLExprParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ExprEq:
		//	e=ExprSimple ('=?' e2=ExprSimple)? | => '(' SYMBOL? LExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//e=ExprSimple ('=?' e2=ExprSimple)? | => '(' SYMBOL? LExpr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//e=ExprSimple ('=?' e2=ExprSimple)?
		public Group getGroup_0() { return cGroup_0; }
		
		//e=ExprSimple
		public Assignment getEAssignment_0_0() { return cEAssignment_0_0; }
		
		//ExprSimple
		public RuleCall getEExprSimpleParserRuleCall_0_0_0() { return cEExprSimpleParserRuleCall_0_0_0; }
		
		//('=?' e2=ExprSimple)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'=?'
		public Keyword getEqualsSignQuestionMarkKeyword_0_1_0() { return cEqualsSignQuestionMarkKeyword_0_1_0; }
		
		//e2=ExprSimple
		public Assignment getE2Assignment_0_1_1() { return cE2Assignment_0_1_1; }
		
		//ExprSimple
		public RuleCall getE2ExprSimpleParserRuleCall_0_1_1_0() { return cE2ExprSimpleParserRuleCall_0_1_1_0; }
		
		//=> '(' SYMBOL? LExpr ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//=> '('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//SYMBOL?
		public RuleCall getSYMBOLTerminalRuleCall_1_1() { return cSYMBOLTerminalRuleCall_1_1; }
		
		//LExpr
		public RuleCall getLExprParserRuleCall_1_2() { return cLExprParserRuleCall_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class LExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.LExpr");
		private final Assignment cE1Assignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cE1ExprParserRuleCall_0 = (RuleCall)cE1Assignment.eContents().get(0);
		
		//LExpr:
		//	e1+=Expr+;
		@Override public ParserRule getRule() { return rule; }
		
		//e1+=Expr+
		public Assignment getE1Assignment() { return cE1Assignment; }
		
		//Expr
		public RuleCall getE1ExprParserRuleCall_0() { return cE1ExprParserRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final ProgramElements pProgram;
	private final FunctionElements pFunction;
	private final DefinitionElements pDefinition;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final AssignElements pAssign;
	private final WhileElements pWhile;
	private final ForElements pFor;
	private final IfElements pIf;
	private final ForeachElements pForeach;
	private final VarsElements pVars;
	private final ExprsElements pExprs;
	private final ExprElements pExpr;
	private final ExprSimpleElements pExprSimple;
	private final ExprAndElements pExprAnd;
	private final ExprOrElements pExprOr;
	private final ExprNotElements pExprNot;
	private final ExprEqElements pExprEq;
	private final LExprElements pLExpr;
	private final TerminalRule tVARIABLE;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tCR;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WhileLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProgram = new ProgramElements();
		this.pFunction = new FunctionElements();
		this.pDefinition = new DefinitionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.pAssign = new AssignElements();
		this.pWhile = new WhileElements();
		this.pFor = new ForElements();
		this.pIf = new IfElements();
		this.pForeach = new ForeachElements();
		this.pVars = new VarsElements();
		this.pExprs = new ExprsElements();
		this.pExpr = new ExprElements();
		this.pExprSimple = new ExprSimpleElements();
		this.pExprAnd = new ExprAndElements();
		this.pExprOr = new ExprOrElements();
		this.pExprNot = new ExprNotElements();
		this.pExprEq = new ExprEqElements();
		this.pLExpr = new LExprElements();
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.VARIABLE");
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.SYMBOL");
		this.tCR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.WhileLanguage.CR");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.WhileLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*Model:
	//	program += Program;	
	//	
	//Program:
	//	(Function)+;
	//
	//Function:
	//	'function' SYMBOL ':' Definition;
	//	
	//Definition:
	//	'read' Input '%' Commands '%' 'write' Output;
	//	
	//Input:
	//	VARIABLE (',' VARIABLE)*;
	//	
	//Output:
	//	VARIABLE (',' VARIABLE)*;
	//		
	//Commands :
	//	Command (';' Command)*;
	//	
	//Command:
	//	'nop' |
	//	Vars ':=' Exprs |
	//	'while' CommandBody |
	//	'for' CommandBody |
	//	'if' Expr 'then' Commands ('else' Commands)? 'fi' |
	//	'foreach' Expr 'in' CommandBody;
	//
	//CommandBody :
	//	Expr 'do' Commands 'od';
	//	
	//Vars:
	//	VARIABLE (',' VARIABLE)*;
	//	
	//Exprs:
	//	Expr (',' Expr)*;
	//	
	//Expr:
	//	ExprAnd;
	//	
	//LExpr:
	//	(Expr)+;
	//	
	//ExprSimple:
	//	'nil' | VARIABLE | SYMBOL | 
	//	'(' 'cons' LExpr ')' | '(' 'list' LExpr ')' |
	//	'(' 'hd' Expr ')' | '(' 'tl' Expr ')' |
	//	(=> '(' SYMBOL LExpr ')');
	//	
	//ExprAnd:
	//	ExprOr ('and' ExprOr)*;
	//	
	//ExprOr:
	//	ExprNot ('or' ExprNot)*;
	//	
	//ExprNot:
	//	'not'? ExprEq;
	//	
	//ExprEq:
	//	ExprSimple ('=?' ExprSimple)? | '(' Expr ')';
	//	
	//terminal SYMBOL: ('a'..'z') ('0'..'9'|'a'..'z'|'A'..'Z')* ((('-'|'+'|'.'|'/'|'_'|'&') | '->') ('0'..'9'|'a'..'z'|'A'..'Z')+)* ('?'|'!')?;
	//terminal VARIABLE : ('A'..'Z') ('0'..'9'|'a'..'z'|'A'..'Z')* ((('-'|'+'|'.'|'/'|'_'|'&') | '->') ('0'..'9'|'a'..'z'|'A'..'Z')+)* ('?'|'!')?;
	//
	//*/ Model:
	//	text=Program;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Program:
	//	f+=Function* (CR p=Program)?;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Function:
	//	'function' SYMBOL ':' d=Definition;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Definition:
	//	'read' i=Input
	//	'%' c=Commands
	//	'%' 'write' o=Output;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Input:
	//	v=VARIABLE (',' v2+=VARIABLE)*;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	v=VARIABLE (',' v2+=VARIABLE)*;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Commands:
	//	c+=Command (';' c2+=Command)*;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}
	
	//Command:
	//	nop='nop' | assign=Assign | while=While | for=For | if=If | foreach=Foreach;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Assign:
	//	v=Vars ':=' e=Exprs;
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}
	
	//While:
	//	'while' e=Expr 'do' c=Commands 'od';
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//For:
	//	'for' e=Expr 'do' c=Commands 'od';
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//If:
	//	'if' e=Expr 'then' c=Commands ('else' c2=Commands)? 'fi';
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Foreach:
	//	'foreach' e=Expr 'in' e2=Expr 'do' c=Commands 'od';
	public ForeachElements getForeachAccess() {
		return pForeach;
	}
	
	public ParserRule getForeachRule() {
		return getForeachAccess().getRule();
	}
	
	//Vars:
	//	v=VARIABLE (',' v2+=VARIABLE)*;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}
	
	//Exprs:
	//	e=Expr (',' e2+=Expr)*;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}
	
	//Expr:
	//	ea=ExprAnd;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//ExprSimple:
	//	nil='nil' | var=VARIABLE | sym=SYMBOL | '(' 'cons' e3=LExpr ')' | '(' 'list' e4=LExpr ')' | '(' 'hd' e5=Expr ')' |
	//	'(' 'tl' e6=Expr ')';
	public ExprSimpleElements getExprSimpleAccess() {
		return pExprSimple;
	}
	
	public ParserRule getExprSimpleRule() {
		return getExprSimpleAccess().getRule();
	}
	
	//ExprAnd:
	//	eo=ExprOr ('and' eo2+=ExprOr)*;
	public ExprAndElements getExprAndAccess() {
		return pExprAnd;
	}
	
	public ParserRule getExprAndRule() {
		return getExprAndAccess().getRule();
	}
	
	//ExprOr:
	//	en=ExprNot ('or' en2+=ExprNot)*;
	public ExprOrElements getExprOrAccess() {
		return pExprOr;
	}
	
	public ParserRule getExprOrRule() {
		return getExprOrAccess().getRule();
	}
	
	//ExprNot:
	//	'not' e=ExprEq | e2=ExprEq;
	public ExprNotElements getExprNotAccess() {
		return pExprNot;
	}
	
	public ParserRule getExprNotRule() {
		return getExprNotAccess().getRule();
	}
	
	//ExprEq:
	//	e=ExprSimple ('=?' e2=ExprSimple)? | => '(' SYMBOL? LExpr ')';
	public ExprEqElements getExprEqAccess() {
		return pExprEq;
	}
	
	public ParserRule getExprEqRule() {
		return getExprEqAccess().getRule();
	}
	
	//LExpr:
	//	e1+=Expr+;
	public LExprElements getLExprAccess() {
		return pLExpr;
	}
	
	public ParserRule getLExprRule() {
		return getLExprAccess().getRule();
	}
	
	//terminal VARIABLE:
	//	'A'..'Z' ('A'..'Z' | 'a'..'z' | '0'..'9')*;
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal SYMBOL:
	//	'a'..'z' ('A'..'Z' | 'a'..'z' | '0'..'9')*;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	}
	
	//terminal CR:
	//	'\r';
	public TerminalRule getCRRule() {
		return tCR;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
