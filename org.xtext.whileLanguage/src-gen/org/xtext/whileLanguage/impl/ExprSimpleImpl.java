/**
 * generated by Xtext 2.15.0
 */
package org.xtext.whileLanguage.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.whileLanguage.Expr;
import org.xtext.whileLanguage.ExprSimple;
import org.xtext.whileLanguage.LExpr;
import org.xtext.whileLanguage.WhileLanguagePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr Simple</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.whileLanguage.impl.ExprSimpleImpl#getNil <em>Nil</em>}</li>
 *   <li>{@link org.xtext.whileLanguage.impl.ExprSimpleImpl#getVar <em>Var</em>}</li>
 *   <li>{@link org.xtext.whileLanguage.impl.ExprSimpleImpl#getSym <em>Sym</em>}</li>
 *   <li>{@link org.xtext.whileLanguage.impl.ExprSimpleImpl#getE3 <em>E3</em>}</li>
 *   <li>{@link org.xtext.whileLanguage.impl.ExprSimpleImpl#getE4 <em>E4</em>}</li>
 *   <li>{@link org.xtext.whileLanguage.impl.ExprSimpleImpl#getE5 <em>E5</em>}</li>
 *   <li>{@link org.xtext.whileLanguage.impl.ExprSimpleImpl#getE6 <em>E6</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprSimpleImpl extends MinimalEObjectImpl.Container implements ExprSimple
{
  /**
   * The default value of the '{@link #getNil() <em>Nil</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNil()
   * @generated
   * @ordered
   */
  protected static final String NIL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNil() <em>Nil</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNil()
   * @generated
   * @ordered
   */
  protected String nil = NIL_EDEFAULT;

  /**
   * The default value of the '{@link #getVar() <em>Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected static final String VAR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVar() <em>Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected String var = VAR_EDEFAULT;

  /**
   * The default value of the '{@link #getSym() <em>Sym</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSym()
   * @generated
   * @ordered
   */
  protected static final String SYM_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSym() <em>Sym</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSym()
   * @generated
   * @ordered
   */
  protected String sym = SYM_EDEFAULT;

  /**
   * The cached value of the '{@link #getE3() <em>E3</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getE3()
   * @generated
   * @ordered
   */
  protected LExpr e3;

  /**
   * The cached value of the '{@link #getE4() <em>E4</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getE4()
   * @generated
   * @ordered
   */
  protected LExpr e4;

  /**
   * The cached value of the '{@link #getE5() <em>E5</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getE5()
   * @generated
   * @ordered
   */
  protected Expr e5;

  /**
   * The cached value of the '{@link #getE6() <em>E6</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getE6()
   * @generated
   * @ordered
   */
  protected Expr e6;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprSimpleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WhileLanguagePackage.Literals.EXPR_SIMPLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getNil()
  {
    return nil;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNil(String newNil)
  {
    String oldNil = nil;
    nil = newNil;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.EXPR_SIMPLE__NIL, oldNil, nil));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getVar()
  {
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVar(String newVar)
  {
    String oldVar = var;
    var = newVar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.EXPR_SIMPLE__VAR, oldVar, var));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSym()
  {
    return sym;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSym(String newSym)
  {
    String oldSym = sym;
    sym = newSym;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.EXPR_SIMPLE__SYM, oldSym, sym));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LExpr getE3()
  {
    return e3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetE3(LExpr newE3, NotificationChain msgs)
  {
    LExpr oldE3 = e3;
    e3 = newE3;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.EXPR_SIMPLE__E3, oldE3, newE3);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setE3(LExpr newE3)
  {
    if (newE3 != e3)
    {
      NotificationChain msgs = null;
      if (e3 != null)
        msgs = ((InternalEObject)e3).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.EXPR_SIMPLE__E3, null, msgs);
      if (newE3 != null)
        msgs = ((InternalEObject)newE3).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.EXPR_SIMPLE__E3, null, msgs);
      msgs = basicSetE3(newE3, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.EXPR_SIMPLE__E3, newE3, newE3));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LExpr getE4()
  {
    return e4;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetE4(LExpr newE4, NotificationChain msgs)
  {
    LExpr oldE4 = e4;
    e4 = newE4;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.EXPR_SIMPLE__E4, oldE4, newE4);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setE4(LExpr newE4)
  {
    if (newE4 != e4)
    {
      NotificationChain msgs = null;
      if (e4 != null)
        msgs = ((InternalEObject)e4).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.EXPR_SIMPLE__E4, null, msgs);
      if (newE4 != null)
        msgs = ((InternalEObject)newE4).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.EXPR_SIMPLE__E4, null, msgs);
      msgs = basicSetE4(newE4, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.EXPR_SIMPLE__E4, newE4, newE4));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getE5()
  {
    return e5;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetE5(Expr newE5, NotificationChain msgs)
  {
    Expr oldE5 = e5;
    e5 = newE5;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.EXPR_SIMPLE__E5, oldE5, newE5);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setE5(Expr newE5)
  {
    if (newE5 != e5)
    {
      NotificationChain msgs = null;
      if (e5 != null)
        msgs = ((InternalEObject)e5).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.EXPR_SIMPLE__E5, null, msgs);
      if (newE5 != null)
        msgs = ((InternalEObject)newE5).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.EXPR_SIMPLE__E5, null, msgs);
      msgs = basicSetE5(newE5, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.EXPR_SIMPLE__E5, newE5, newE5));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getE6()
  {
    return e6;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetE6(Expr newE6, NotificationChain msgs)
  {
    Expr oldE6 = e6;
    e6 = newE6;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.EXPR_SIMPLE__E6, oldE6, newE6);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setE6(Expr newE6)
  {
    if (newE6 != e6)
    {
      NotificationChain msgs = null;
      if (e6 != null)
        msgs = ((InternalEObject)e6).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.EXPR_SIMPLE__E6, null, msgs);
      if (newE6 != null)
        msgs = ((InternalEObject)newE6).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.EXPR_SIMPLE__E6, null, msgs);
      msgs = basicSetE6(newE6, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.EXPR_SIMPLE__E6, newE6, newE6));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WhileLanguagePackage.EXPR_SIMPLE__E3:
        return basicSetE3(null, msgs);
      case WhileLanguagePackage.EXPR_SIMPLE__E4:
        return basicSetE4(null, msgs);
      case WhileLanguagePackage.EXPR_SIMPLE__E5:
        return basicSetE5(null, msgs);
      case WhileLanguagePackage.EXPR_SIMPLE__E6:
        return basicSetE6(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WhileLanguagePackage.EXPR_SIMPLE__NIL:
        return getNil();
      case WhileLanguagePackage.EXPR_SIMPLE__VAR:
        return getVar();
      case WhileLanguagePackage.EXPR_SIMPLE__SYM:
        return getSym();
      case WhileLanguagePackage.EXPR_SIMPLE__E3:
        return getE3();
      case WhileLanguagePackage.EXPR_SIMPLE__E4:
        return getE4();
      case WhileLanguagePackage.EXPR_SIMPLE__E5:
        return getE5();
      case WhileLanguagePackage.EXPR_SIMPLE__E6:
        return getE6();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WhileLanguagePackage.EXPR_SIMPLE__NIL:
        setNil((String)newValue);
        return;
      case WhileLanguagePackage.EXPR_SIMPLE__VAR:
        setVar((String)newValue);
        return;
      case WhileLanguagePackage.EXPR_SIMPLE__SYM:
        setSym((String)newValue);
        return;
      case WhileLanguagePackage.EXPR_SIMPLE__E3:
        setE3((LExpr)newValue);
        return;
      case WhileLanguagePackage.EXPR_SIMPLE__E4:
        setE4((LExpr)newValue);
        return;
      case WhileLanguagePackage.EXPR_SIMPLE__E5:
        setE5((Expr)newValue);
        return;
      case WhileLanguagePackage.EXPR_SIMPLE__E6:
        setE6((Expr)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WhileLanguagePackage.EXPR_SIMPLE__NIL:
        setNil(NIL_EDEFAULT);
        return;
      case WhileLanguagePackage.EXPR_SIMPLE__VAR:
        setVar(VAR_EDEFAULT);
        return;
      case WhileLanguagePackage.EXPR_SIMPLE__SYM:
        setSym(SYM_EDEFAULT);
        return;
      case WhileLanguagePackage.EXPR_SIMPLE__E3:
        setE3((LExpr)null);
        return;
      case WhileLanguagePackage.EXPR_SIMPLE__E4:
        setE4((LExpr)null);
        return;
      case WhileLanguagePackage.EXPR_SIMPLE__E5:
        setE5((Expr)null);
        return;
      case WhileLanguagePackage.EXPR_SIMPLE__E6:
        setE6((Expr)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WhileLanguagePackage.EXPR_SIMPLE__NIL:
        return NIL_EDEFAULT == null ? nil != null : !NIL_EDEFAULT.equals(nil);
      case WhileLanguagePackage.EXPR_SIMPLE__VAR:
        return VAR_EDEFAULT == null ? var != null : !VAR_EDEFAULT.equals(var);
      case WhileLanguagePackage.EXPR_SIMPLE__SYM:
        return SYM_EDEFAULT == null ? sym != null : !SYM_EDEFAULT.equals(sym);
      case WhileLanguagePackage.EXPR_SIMPLE__E3:
        return e3 != null;
      case WhileLanguagePackage.EXPR_SIMPLE__E4:
        return e4 != null;
      case WhileLanguagePackage.EXPR_SIMPLE__E5:
        return e5 != null;
      case WhileLanguagePackage.EXPR_SIMPLE__E6:
        return e6 != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (nil: ");
    result.append(nil);
    result.append(", var: ");
    result.append(var);
    result.append(", sym: ");
    result.append(sym);
    result.append(')');
    return result.toString();
  }

} //ExprSimpleImpl
