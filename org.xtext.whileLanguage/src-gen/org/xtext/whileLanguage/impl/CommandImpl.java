/**
 * generated by Xtext 2.15.0
 */
package org.xtext.whileLanguage.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.whileLanguage.Assign;
import org.xtext.whileLanguage.Command;
import org.xtext.whileLanguage.For;
import org.xtext.whileLanguage.Foreach;
import org.xtext.whileLanguage.If;
import org.xtext.whileLanguage.While;
import org.xtext.whileLanguage.WhileLanguagePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Command</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.whileLanguage.impl.CommandImpl#getNop <em>Nop</em>}</li>
 *   <li>{@link org.xtext.whileLanguage.impl.CommandImpl#getAssign <em>Assign</em>}</li>
 *   <li>{@link org.xtext.whileLanguage.impl.CommandImpl#getWhile <em>While</em>}</li>
 *   <li>{@link org.xtext.whileLanguage.impl.CommandImpl#getFor <em>For</em>}</li>
 *   <li>{@link org.xtext.whileLanguage.impl.CommandImpl#getIf <em>If</em>}</li>
 *   <li>{@link org.xtext.whileLanguage.impl.CommandImpl#getForeach <em>Foreach</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CommandImpl extends MinimalEObjectImpl.Container implements Command
{
  /**
   * The default value of the '{@link #getNop() <em>Nop</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNop()
   * @generated
   * @ordered
   */
  protected static final String NOP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNop() <em>Nop</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNop()
   * @generated
   * @ordered
   */
  protected String nop = NOP_EDEFAULT;

  /**
   * The cached value of the '{@link #getAssign() <em>Assign</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssign()
   * @generated
   * @ordered
   */
  protected Assign assign;

  /**
   * The cached value of the '{@link #getWhile() <em>While</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWhile()
   * @generated
   * @ordered
   */
  protected While while_;

  /**
   * The cached value of the '{@link #getFor() <em>For</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFor()
   * @generated
   * @ordered
   */
  protected For for_;

  /**
   * The cached value of the '{@link #getIf() <em>If</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIf()
   * @generated
   * @ordered
   */
  protected If if_;

  /**
   * The cached value of the '{@link #getForeach() <em>Foreach</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForeach()
   * @generated
   * @ordered
   */
  protected Foreach foreach;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CommandImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WhileLanguagePackage.Literals.COMMAND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getNop()
  {
    return nop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNop(String newNop)
  {
    String oldNop = nop;
    nop = newNop;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.COMMAND__NOP, oldNop, nop));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assign getAssign()
  {
    return assign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAssign(Assign newAssign, NotificationChain msgs)
  {
    Assign oldAssign = assign;
    assign = newAssign;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.COMMAND__ASSIGN, oldAssign, newAssign);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAssign(Assign newAssign)
  {
    if (newAssign != assign)
    {
      NotificationChain msgs = null;
      if (assign != null)
        msgs = ((InternalEObject)assign).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.COMMAND__ASSIGN, null, msgs);
      if (newAssign != null)
        msgs = ((InternalEObject)newAssign).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.COMMAND__ASSIGN, null, msgs);
      msgs = basicSetAssign(newAssign, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.COMMAND__ASSIGN, newAssign, newAssign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public While getWhile()
  {
    return while_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWhile(While newWhile, NotificationChain msgs)
  {
    While oldWhile = while_;
    while_ = newWhile;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.COMMAND__WHILE, oldWhile, newWhile);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setWhile(While newWhile)
  {
    if (newWhile != while_)
    {
      NotificationChain msgs = null;
      if (while_ != null)
        msgs = ((InternalEObject)while_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.COMMAND__WHILE, null, msgs);
      if (newWhile != null)
        msgs = ((InternalEObject)newWhile).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.COMMAND__WHILE, null, msgs);
      msgs = basicSetWhile(newWhile, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.COMMAND__WHILE, newWhile, newWhile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public For getFor()
  {
    return for_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFor(For newFor, NotificationChain msgs)
  {
    For oldFor = for_;
    for_ = newFor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.COMMAND__FOR, oldFor, newFor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFor(For newFor)
  {
    if (newFor != for_)
    {
      NotificationChain msgs = null;
      if (for_ != null)
        msgs = ((InternalEObject)for_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.COMMAND__FOR, null, msgs);
      if (newFor != null)
        msgs = ((InternalEObject)newFor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.COMMAND__FOR, null, msgs);
      msgs = basicSetFor(newFor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.COMMAND__FOR, newFor, newFor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public If getIf()
  {
    return if_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIf(If newIf, NotificationChain msgs)
  {
    If oldIf = if_;
    if_ = newIf;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.COMMAND__IF, oldIf, newIf);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIf(If newIf)
  {
    if (newIf != if_)
    {
      NotificationChain msgs = null;
      if (if_ != null)
        msgs = ((InternalEObject)if_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.COMMAND__IF, null, msgs);
      if (newIf != null)
        msgs = ((InternalEObject)newIf).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.COMMAND__IF, null, msgs);
      msgs = basicSetIf(newIf, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.COMMAND__IF, newIf, newIf));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Foreach getForeach()
  {
    return foreach;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetForeach(Foreach newForeach, NotificationChain msgs)
  {
    Foreach oldForeach = foreach;
    foreach = newForeach;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.COMMAND__FOREACH, oldForeach, newForeach);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setForeach(Foreach newForeach)
  {
    if (newForeach != foreach)
    {
      NotificationChain msgs = null;
      if (foreach != null)
        msgs = ((InternalEObject)foreach).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.COMMAND__FOREACH, null, msgs);
      if (newForeach != null)
        msgs = ((InternalEObject)newForeach).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileLanguagePackage.COMMAND__FOREACH, null, msgs);
      msgs = basicSetForeach(newForeach, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileLanguagePackage.COMMAND__FOREACH, newForeach, newForeach));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WhileLanguagePackage.COMMAND__ASSIGN:
        return basicSetAssign(null, msgs);
      case WhileLanguagePackage.COMMAND__WHILE:
        return basicSetWhile(null, msgs);
      case WhileLanguagePackage.COMMAND__FOR:
        return basicSetFor(null, msgs);
      case WhileLanguagePackage.COMMAND__IF:
        return basicSetIf(null, msgs);
      case WhileLanguagePackage.COMMAND__FOREACH:
        return basicSetForeach(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WhileLanguagePackage.COMMAND__NOP:
        return getNop();
      case WhileLanguagePackage.COMMAND__ASSIGN:
        return getAssign();
      case WhileLanguagePackage.COMMAND__WHILE:
        return getWhile();
      case WhileLanguagePackage.COMMAND__FOR:
        return getFor();
      case WhileLanguagePackage.COMMAND__IF:
        return getIf();
      case WhileLanguagePackage.COMMAND__FOREACH:
        return getForeach();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WhileLanguagePackage.COMMAND__NOP:
        setNop((String)newValue);
        return;
      case WhileLanguagePackage.COMMAND__ASSIGN:
        setAssign((Assign)newValue);
        return;
      case WhileLanguagePackage.COMMAND__WHILE:
        setWhile((While)newValue);
        return;
      case WhileLanguagePackage.COMMAND__FOR:
        setFor((For)newValue);
        return;
      case WhileLanguagePackage.COMMAND__IF:
        setIf((If)newValue);
        return;
      case WhileLanguagePackage.COMMAND__FOREACH:
        setForeach((Foreach)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WhileLanguagePackage.COMMAND__NOP:
        setNop(NOP_EDEFAULT);
        return;
      case WhileLanguagePackage.COMMAND__ASSIGN:
        setAssign((Assign)null);
        return;
      case WhileLanguagePackage.COMMAND__WHILE:
        setWhile((While)null);
        return;
      case WhileLanguagePackage.COMMAND__FOR:
        setFor((For)null);
        return;
      case WhileLanguagePackage.COMMAND__IF:
        setIf((If)null);
        return;
      case WhileLanguagePackage.COMMAND__FOREACH:
        setForeach((Foreach)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WhileLanguagePackage.COMMAND__NOP:
        return NOP_EDEFAULT == null ? nop != null : !NOP_EDEFAULT.equals(nop);
      case WhileLanguagePackage.COMMAND__ASSIGN:
        return assign != null;
      case WhileLanguagePackage.COMMAND__WHILE:
        return while_ != null;
      case WhileLanguagePackage.COMMAND__FOR:
        return for_ != null;
      case WhileLanguagePackage.COMMAND__IF:
        return if_ != null;
      case WhileLanguagePackage.COMMAND__FOREACH:
        return foreach != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (nop: ");
    result.append(nop);
    result.append(')');
    return result.toString();
  }

} //CommandImpl
