/*
 * generated by Xtext 2.15.0
 */
package org.xtext.comp.wh.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WhGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.Model");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTextProgramParserRuleCall_0 = (RuleCall)cTextAssignment.eContents().get(0);
		
		///*Model:
		//	program += Program;	
		//	
		//Program:
		//	(Function)+;
		//
		//Function:
		//	'function' SYMBOL ':' Definition;
		//	
		//Definition:
		//	'read' Input '%' Commands '%' 'write' Output;
		//	
		//Input:
		//	VARIABLE (',' VARIABLE)*;
		//	
		//Output:
		//	VARIABLE (',' VARIABLE)*;
		//		
		//Commands :
		//	Command (';' Command)*;
		//	
		//Command:
		//	'nop' |
		//	Vars ':=' Exprs |
		//	'while' CommandBody |
		//	'for' CommandBody |
		//	'if' Expr 'then' Commands ('else' Commands)? 'fi' |
		//	'foreach' Expr 'in' CommandBody;
		//
		//CommandBody :
		//	Expr 'do' Commands 'od';
		//	
		//Vars:
		//	VARIABLE (',' VARIABLE)*;
		//	
		//Exprs:
		//	Expr (',' Expr)*;
		//	
		//Expr:
		//	ExprAnd;
		//	
		//LExpr:
		//	(Expr)+;
		//	
		//ExprSimple:
		//	'nil' | VARIABLE | SYMBOL | 
		//	'(' 'cons' LExpr ')' | '(' 'list' LExpr ')' |
		//	'(' 'hd' Expr ')' | '(' 'tl' Expr ')' |
		//	(=> '(' SYMBOL LExpr ')');
		//	
		//ExprAnd:
		//	ExprOr ('and' ExprOr)*;
		//	
		//ExprOr:
		//	ExprNot ('or' ExprNot)*;
		//	
		//ExprNot:
		//	'not'? ExprEq;
		//	
		//ExprEq:
		//	ExprSimple ('=?' ExprSimple)? | '(' Expr ')';
		//	
		//terminal SYMBOL: ('a'..'z') ('0'..'9'|'a'..'z'|'A'..'Z')* ((('-'|'+'|'.'|'/'|'_'|'&') | '->') ('0'..'9'|'a'..'z'|'A'..'Z')+)* ('?'|'!')?;
		//terminal VARIABLE : ('A'..'Z') ('0'..'9'|'a'..'z'|'A'..'Z')* ((('-'|'+'|'.'|'/'|'_'|'&') | '->') ('0'..'9'|'a'..'z'|'A'..'Z')+)* ('?'|'!')?;
		//
		//*/ Model:
		//	text=Program;
		@Override public ParserRule getRule() { return rule; }
		
		//text=Program
		public Assignment getTextAssignment() { return cTextAssignment; }
		
		//Program
		public RuleCall getTextProgramParserRuleCall_0() { return cTextProgramParserRuleCall_0; }
	}
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.Program");
		private final Assignment cFunctionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_0 = (RuleCall)cFunctionsAssignment.eContents().get(0);
		
		//Program:
		//	functions+=Function+;
		@Override public ParserRule getRule() { return rule; }
		
		//functions+=Function+
		public Assignment getFunctionsAssignment() { return cFunctionsAssignment; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_0() { return cFunctionsFunctionParserRuleCall_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFnameSYMBOLTerminalRuleCall_1_0 = (RuleCall)cFnameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionDefinitionParserRuleCall_3_0 = (RuleCall)cDefinitionAssignment_3.eContents().get(0);
		
		//Function:
		//	'function' fname=SYMBOL ':' definition=Definition;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' fname=SYMBOL ':' definition=Definition
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//fname=SYMBOL
		public Assignment getFnameAssignment_1() { return cFnameAssignment_1; }
		
		//SYMBOL
		public RuleCall getFnameSYMBOLTerminalRuleCall_1_0() { return cFnameSYMBOLTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//definition=Definition
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }
		
		//Definition
		public RuleCall getDefinitionDefinitionParserRuleCall_3_0() { return cDefinitionDefinitionParserRuleCall_3_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInputsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputsInputParserRuleCall_1_0 = (RuleCall)cInputsAssignment_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandsParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cWriteKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOutputsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutputsOutputParserRuleCall_6_0 = (RuleCall)cOutputsAssignment_6.eContents().get(0);
		
		//Definition:
		//	'read' inputs=Input
		//	'%' commands=Commands
		//	'%' 'write' outputs=Output;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' inputs=Input '%' commands=Commands '%' 'write' outputs=Output
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//inputs=Input
		public Assignment getInputsAssignment_1() { return cInputsAssignment_1; }
		
		//Input
		public RuleCall getInputsInputParserRuleCall_1_0() { return cInputsInputParserRuleCall_1_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_3_0() { return cCommandsCommandsParserRuleCall_3_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }
		
		//'write'
		public Keyword getWriteKeyword_5() { return cWriteKeyword_5; }
		
		//outputs=Output
		public Assignment getOutputsAssignment_6() { return cOutputsAssignment_6; }
		
		//Output
		public RuleCall getOutputsOutputParserRuleCall_6_0() { return cOutputsOutputParserRuleCall_6_0; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamsVARIABLETerminalRuleCall_0_0 = (RuleCall)cParamsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		
		//Input:
		//	params+=VARIABLE (',' params+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//params+=VARIABLE (',' params+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//params+=VARIABLE
		public Assignment getParamsAssignment_0() { return cParamsAssignment_0; }
		
		//VARIABLE
		public RuleCall getParamsVARIABLETerminalRuleCall_0_0() { return cParamsVARIABLETerminalRuleCall_0_0; }
		
		//(',' params+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//params+=VARIABLE
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }
		
		//VARIABLE
		public RuleCall getParamsVARIABLETerminalRuleCall_1_1_0() { return cParamsVARIABLETerminalRuleCall_1_1_0; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cR_valuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cR_valuesVARIABLETerminalRuleCall_0_0 = (RuleCall)cR_valuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cR_valuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cR_valuesVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cR_valuesAssignment_1_1.eContents().get(0);
		
		//Output:
		//	r_values+=VARIABLE (',' r_values+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//r_values+=VARIABLE (',' r_values+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//r_values+=VARIABLE
		public Assignment getR_valuesAssignment_0() { return cR_valuesAssignment_0; }
		
		//VARIABLE
		public RuleCall getR_valuesVARIABLETerminalRuleCall_0_0() { return cR_valuesVARIABLETerminalRuleCall_0_0; }
		
		//(',' r_values+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//r_values+=VARIABLE
		public Assignment getR_valuesAssignment_1_1() { return cR_valuesAssignment_1_1; }
		
		//VARIABLE
		public RuleCall getR_valuesVARIABLETerminalRuleCall_1_1_0() { return cR_valuesVARIABLETerminalRuleCall_1_1_0; }
	}
	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.Commands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandCommandParserRuleCall_0_0 = (RuleCall)cCommandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCommandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCommandCommandParserRuleCall_1_1_0 = (RuleCall)cCommandAssignment_1_1.eContents().get(0);
		
		//Commands:
		//	command+=Command (';' command+=Command)*;
		@Override public ParserRule getRule() { return rule; }
		
		//command+=Command (';' command+=Command)*
		public Group getGroup() { return cGroup; }
		
		//command+=Command
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }
		
		//Command
		public RuleCall getCommandCommandParserRuleCall_0_0() { return cCommandCommandParserRuleCall_0_0; }
		
		//(';' command+=Command)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//command+=Command
		public Assignment getCommandAssignment_1_1() { return cCommandAssignment_1_1; }
		
		//Command
		public RuleCall getCommandCommandParserRuleCall_1_1_0() { return cCommandCommandParserRuleCall_1_1_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCommandNopParserRuleCall_0_0 = (RuleCall)cCommandAssignment_0.eContents().get(0);
		private final Assignment cCommandAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCommandAssignParserRuleCall_1_0 = (RuleCall)cCommandAssignment_1.eContents().get(0);
		private final Assignment cCommandAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCommandWhileParserRuleCall_2_0 = (RuleCall)cCommandAssignment_2.eContents().get(0);
		private final Assignment cCommandAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCommandForParserRuleCall_3_0 = (RuleCall)cCommandAssignment_3.eContents().get(0);
		private final Assignment cCommandAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cCommandIfParserRuleCall_4_0 = (RuleCall)cCommandAssignment_4.eContents().get(0);
		private final Assignment cCommandAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cCommandForeachParserRuleCall_5_0 = (RuleCall)cCommandAssignment_5.eContents().get(0);
		
		//Command:
		//	command=Nop | command=Assign | command=While | command=For | command=If | command=Foreach;
		@Override public ParserRule getRule() { return rule; }
		
		//command=Nop | command=Assign | command=While | command=For | command=If | command=Foreach
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//command=Nop
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }
		
		//Nop
		public RuleCall getCommandNopParserRuleCall_0_0() { return cCommandNopParserRuleCall_0_0; }
		
		//command=Assign
		public Assignment getCommandAssignment_1() { return cCommandAssignment_1; }
		
		//Assign
		public RuleCall getCommandAssignParserRuleCall_1_0() { return cCommandAssignParserRuleCall_1_0; }
		
		//command=While
		public Assignment getCommandAssignment_2() { return cCommandAssignment_2; }
		
		//While
		public RuleCall getCommandWhileParserRuleCall_2_0() { return cCommandWhileParserRuleCall_2_0; }
		
		//command=For
		public Assignment getCommandAssignment_3() { return cCommandAssignment_3; }
		
		//For
		public RuleCall getCommandForParserRuleCall_3_0() { return cCommandForParserRuleCall_3_0; }
		
		//command=If
		public Assignment getCommandAssignment_4() { return cCommandAssignment_4; }
		
		//If
		public RuleCall getCommandIfParserRuleCall_4_0() { return cCommandIfParserRuleCall_4_0; }
		
		//command=Foreach
		public Assignment getCommandAssignment_5() { return cCommandAssignment_5; }
		
		//Foreach
		public RuleCall getCommandForeachParserRuleCall_5_0() { return cCommandForeachParserRuleCall_5_0; }
	}
	public class NopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.Nop");
		private final Assignment cNopAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNopNopKeyword_0 = (Keyword)cNopAssignment.eContents().get(0);
		
		//Nop:
		//	nop='nop';
		@Override public ParserRule getRule() { return rule; }
		
		//nop='nop'
		public Assignment getNopAssignment() { return cNopAssignment; }
		
		//'nop'
		public Keyword getNopNopKeyword_0() { return cNopNopKeyword_0; }
	}
	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsVarsParserRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprsExprsParserRuleCall_2_0 = (RuleCall)cExprsAssignment_2.eContents().get(0);
		
		//Assign:
		//	vars=Vars ':=' exprs=Exprs;
		@Override public ParserRule getRule() { return rule; }
		
		//vars=Vars ':=' exprs=Exprs
		public Group getGroup() { return cGroup; }
		
		//vars=Vars
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }
		
		//Vars
		public RuleCall getVarsVarsParserRuleCall_0_0() { return cVarsVarsParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//exprs=Exprs
		public Assignment getExprsAssignment_2() { return cExprsAssignment_2; }
		
		//Exprs
		public RuleCall getExprsExprsParserRuleCall_2_0() { return cExprsExprsParserRuleCall_2_0; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExprParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandsParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final Keyword cOdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//While:
		//	'while' cond=Expr 'do' commands=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' cond=Expr 'do' commands=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//cond=Expr
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expr
		public RuleCall getCondExprParserRuleCall_1_0() { return cCondExprParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_3_0() { return cCommandsCommandsParserRuleCall_3_0; }
		
		//'od'
		public Keyword getOdKeyword_4() { return cOdKeyword_4; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExprParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandsParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final Keyword cOdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//For:
		//	'for' cond=Expr 'do' commands=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'for' cond=Expr 'do' commands=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//cond=Expr
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expr
		public RuleCall getCondExprParserRuleCall_1_0() { return cCondExprParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_3_0() { return cCommandsCommandsParserRuleCall_3_0; }
		
		//'od'
		public Keyword getOdKeyword_4() { return cOdKeyword_4; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExprParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIf_commandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIf_commandsCommandsParserRuleCall_3_0 = (RuleCall)cIf_commandsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElse_commandsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElse_commandsCommandsParserRuleCall_4_1_0 = (RuleCall)cElse_commandsAssignment_4_1.eContents().get(0);
		private final Keyword cFiKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//If:
		//	'if' cond=Expr 'then' if_commands=Commands ('else' else_commands=Commands)? 'fi';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' cond=Expr 'then' if_commands=Commands ('else' else_commands=Commands)? 'fi'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//cond=Expr
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expr
		public RuleCall getCondExprParserRuleCall_1_0() { return cCondExprParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//if_commands=Commands
		public Assignment getIf_commandsAssignment_3() { return cIf_commandsAssignment_3; }
		
		//Commands
		public RuleCall getIf_commandsCommandsParserRuleCall_3_0() { return cIf_commandsCommandsParserRuleCall_3_0; }
		
		//('else' else_commands=Commands)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//else_commands=Commands
		public Assignment getElse_commandsAssignment_4_1() { return cElse_commandsAssignment_4_1; }
		
		//Commands
		public RuleCall getElse_commandsCommandsParserRuleCall_4_1_0() { return cElse_commandsCommandsParserRuleCall_4_1_0; }
		
		//'fi'
		public Keyword getFiKeyword_5() { return cFiKeyword_5; }
	}
	public class ForeachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.Foreach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExprParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEnsExprParserRuleCall_3_0 = (RuleCall)cEnsAssignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCommandsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommandsCommandsParserRuleCall_5_0 = (RuleCall)cCommandsAssignment_5.eContents().get(0);
		private final Keyword cOdKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Foreach:
		//	'foreach' cond=Expr 'in' ens=Expr 'do' commands=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' cond=Expr 'in' ens=Expr 'do' commands=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//cond=Expr
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expr
		public RuleCall getCondExprParserRuleCall_1_0() { return cCondExprParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//ens=Expr
		public Assignment getEnsAssignment_3() { return cEnsAssignment_3; }
		
		//Expr
		public RuleCall getEnsExprParserRuleCall_3_0() { return cEnsExprParserRuleCall_3_0; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_5() { return cCommandsAssignment_5; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_5_0() { return cCommandsCommandsParserRuleCall_5_0; }
		
		//'od'
		public Keyword getOdKeyword_6() { return cOdKeyword_6; }
	}
	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariablesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariablesVARIABLETerminalRuleCall_0_0 = (RuleCall)cVariablesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariablesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariablesVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cVariablesAssignment_1_1.eContents().get(0);
		
		//Vars:
		//	variables+=VARIABLE (',' variables+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//variables+=VARIABLE (',' variables+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//variables+=VARIABLE
		public Assignment getVariablesAssignment_0() { return cVariablesAssignment_0; }
		
		//VARIABLE
		public RuleCall getVariablesVARIABLETerminalRuleCall_0_0() { return cVariablesVARIABLETerminalRuleCall_0_0; }
		
		//(',' variables+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//variables+=VARIABLE
		public Assignment getVariablesAssignment_1_1() { return cVariablesAssignment_1_1; }
		
		//VARIABLE
		public RuleCall getVariablesVARIABLETerminalRuleCall_1_1_0() { return cVariablesVARIABLETerminalRuleCall_1_1_0; }
	}
	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.Exprs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprExprParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//Exprs:
		//	expr+=Expr (',' expr+=Expr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expr+=Expr (',' expr+=Expr)*
		public Group getGroup() { return cGroup; }
		
		//expr+=Expr
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_0_0() { return cExprExprParserRuleCall_0_0; }
		
		//(',' expr+=Expr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//expr+=Expr
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_1_0() { return cExprExprParserRuleCall_1_1_0; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.Expr");
		private final Assignment cExpr_andAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpr_andExprAndParserRuleCall_0 = (RuleCall)cExpr_andAssignment.eContents().get(0);
		
		//Expr:
		//	expr_and=ExprAnd;
		@Override public ParserRule getRule() { return rule; }
		
		//expr_and=ExprAnd
		public Assignment getExpr_andAssignment() { return cExpr_andAssignment; }
		
		//ExprAnd
		public RuleCall getExpr_andExprAndParserRuleCall_0() { return cExpr_andExprAndParserRuleCall_0; }
	}
	public class ExprSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.ExprSimple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNilAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNilNilKeyword_0_0 = (Keyword)cNilAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableVARIABLETerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cSymAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSymSYMBOLTerminalRuleCall_2_0 = (RuleCall)cSymAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cConsKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cCons_expAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cCons_expLExprParserRuleCall_3_2_0 = (RuleCall)cCons_expAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cListKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cList_expAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cList_expLExprParserRuleCall_4_2_0 = (RuleCall)cList_expAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cHdKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cHd_exprAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cHd_exprExprParserRuleCall_5_2_0 = (RuleCall)cHd_exprAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cTlKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cTl_exprAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cTl_exprExprParserRuleCall_6_2_0 = (RuleCall)cTl_exprAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//ExprSimple:
		//	nil='nil' | variable=VARIABLE | sym=SYMBOL | '(' 'cons' cons_exp=LExpr ')' | '(' 'list' list_exp=LExpr ')' | '(' 'hd'
		//	hd_expr=Expr ')' | '(' 'tl' tl_expr=Expr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//nil='nil' | variable=VARIABLE | sym=SYMBOL | '(' 'cons' cons_exp=LExpr ')' | '(' 'list' list_exp=LExpr ')' | '(' 'hd'
		//hd_expr=Expr ')' | '(' 'tl' tl_expr=Expr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//nil='nil'
		public Assignment getNilAssignment_0() { return cNilAssignment_0; }
		
		//'nil'
		public Keyword getNilNilKeyword_0_0() { return cNilNilKeyword_0_0; }
		
		//variable=VARIABLE
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//VARIABLE
		public RuleCall getVariableVARIABLETerminalRuleCall_1_0() { return cVariableVARIABLETerminalRuleCall_1_0; }
		
		//sym=SYMBOL
		public Assignment getSymAssignment_2() { return cSymAssignment_2; }
		
		//SYMBOL
		public RuleCall getSymSYMBOLTerminalRuleCall_2_0() { return cSymSYMBOLTerminalRuleCall_2_0; }
		
		//'(' 'cons' cons_exp=LExpr ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//'cons'
		public Keyword getConsKeyword_3_1() { return cConsKeyword_3_1; }
		
		//cons_exp=LExpr
		public Assignment getCons_expAssignment_3_2() { return cCons_expAssignment_3_2; }
		
		//LExpr
		public RuleCall getCons_expLExprParserRuleCall_3_2_0() { return cCons_expLExprParserRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'(' 'list' list_exp=LExpr ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//'list'
		public Keyword getListKeyword_4_1() { return cListKeyword_4_1; }
		
		//list_exp=LExpr
		public Assignment getList_expAssignment_4_2() { return cList_expAssignment_4_2; }
		
		//LExpr
		public RuleCall getList_expLExprParserRuleCall_4_2_0() { return cList_expLExprParserRuleCall_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//'(' 'hd' hd_expr=Expr ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//'hd'
		public Keyword getHdKeyword_5_1() { return cHdKeyword_5_1; }
		
		//hd_expr=Expr
		public Assignment getHd_exprAssignment_5_2() { return cHd_exprAssignment_5_2; }
		
		//Expr
		public RuleCall getHd_exprExprParserRuleCall_5_2_0() { return cHd_exprExprParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//'(' 'tl' tl_expr=Expr ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//'tl'
		public Keyword getTlKeyword_6_1() { return cTlKeyword_6_1; }
		
		//tl_expr=Expr
		public Assignment getTl_exprAssignment_6_2() { return cTl_exprAssignment_6_2; }
		
		//Expr
		public RuleCall getTl_exprExprParserRuleCall_6_2_0() { return cTl_exprExprParserRuleCall_6_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }
	}
	public class ExprAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.ExprAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpr_orAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpr_orExprOrParserRuleCall_0_0 = (RuleCall)cExpr_orAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpr_orAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpr_orExprOrParserRuleCall_1_1_0 = (RuleCall)cExpr_orAssignment_1_1.eContents().get(0);
		
		//ExprAnd:
		//	expr_or+=ExprOr ('and' expr_or+=ExprOr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expr_or+=ExprOr ('and' expr_or+=ExprOr)*
		public Group getGroup() { return cGroup; }
		
		//expr_or+=ExprOr
		public Assignment getExpr_orAssignment_0() { return cExpr_orAssignment_0; }
		
		//ExprOr
		public RuleCall getExpr_orExprOrParserRuleCall_0_0() { return cExpr_orExprOrParserRuleCall_0_0; }
		
		//('and' expr_or+=ExprOr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//expr_or+=ExprOr
		public Assignment getExpr_orAssignment_1_1() { return cExpr_orAssignment_1_1; }
		
		//ExprOr
		public RuleCall getExpr_orExprOrParserRuleCall_1_1_0() { return cExpr_orExprOrParserRuleCall_1_1_0; }
	}
	public class ExprOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.ExprOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpr_notAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpr_notExprNotParserRuleCall_0_0 = (RuleCall)cExpr_notAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpr_notAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpr_notExprNotParserRuleCall_1_1_0 = (RuleCall)cExpr_notAssignment_1_1.eContents().get(0);
		
		//ExprOr:
		//	expr_not+=ExprNot ('or' expr_not+=ExprNot)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expr_not+=ExprNot ('or' expr_not+=ExprNot)*
		public Group getGroup() { return cGroup; }
		
		//expr_not+=ExprNot
		public Assignment getExpr_notAssignment_0() { return cExpr_notAssignment_0; }
		
		//ExprNot
		public RuleCall getExpr_notExprNotParserRuleCall_0_0() { return cExpr_notExprNotParserRuleCall_0_0; }
		
		//('or' expr_not+=ExprNot)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'or'
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }
		
		//expr_not+=ExprNot
		public Assignment getExpr_notAssignment_1_1() { return cExpr_notAssignment_1_1; }
		
		//ExprNot
		public RuleCall getExpr_notExprNotParserRuleCall_1_1_0() { return cExpr_notExprNotParserRuleCall_1_1_0; }
	}
	public class ExprNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.ExprNot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHasNotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cHasNotNotKeyword_0_0 = (Keyword)cHasNotAssignment_0.eContents().get(0);
		private final Assignment cExpr_eqAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpr_eqExprEqParserRuleCall_1_0 = (RuleCall)cExpr_eqAssignment_1.eContents().get(0);
		
		//ExprNot:
		//	hasNot='not'? expr_eq=ExprEq;
		@Override public ParserRule getRule() { return rule; }
		
		//hasNot='not'? expr_eq=ExprEq
		public Group getGroup() { return cGroup; }
		
		//hasNot='not'?
		public Assignment getHasNotAssignment_0() { return cHasNotAssignment_0; }
		
		//'not'
		public Keyword getHasNotNotKeyword_0_0() { return cHasNotNotKeyword_0_0; }
		
		//expr_eq=ExprEq
		public Assignment getExpr_eqAssignment_1() { return cExpr_eqAssignment_1; }
		
		//ExprEq
		public RuleCall getExpr_eqExprEqParserRuleCall_1_0() { return cExpr_eqExprEqParserRuleCall_1_0; }
	}
	public class ExprEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.ExprEq");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExpr_leftAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExpr_leftExprSimpleParserRuleCall_0_0_0 = (RuleCall)cExpr_leftAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cEqualsSignQuestionMarkKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cExpr_rightAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExpr_rightExprSimpleParserRuleCall_0_1_1_0 = (RuleCall)cExpr_rightAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSymAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSymSYMBOLTerminalRuleCall_1_1_0 = (RuleCall)cSymAssignment_1_1.eContents().get(0);
		private final Assignment cLexprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLexprLExprParserRuleCall_1_2_0 = (RuleCall)cLexprAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ExprEq:
		//	expr_left=ExprSimple ('=?' expr_right=ExprSimple)? | => '(' sym=SYMBOL lexpr=LExpr ')' | '(' expr=Expr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//expr_left=ExprSimple ('=?' expr_right=ExprSimple)? | => '(' sym=SYMBOL lexpr=LExpr ')' | '(' expr=Expr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//expr_left=ExprSimple ('=?' expr_right=ExprSimple)?
		public Group getGroup_0() { return cGroup_0; }
		
		//expr_left=ExprSimple
		public Assignment getExpr_leftAssignment_0_0() { return cExpr_leftAssignment_0_0; }
		
		//ExprSimple
		public RuleCall getExpr_leftExprSimpleParserRuleCall_0_0_0() { return cExpr_leftExprSimpleParserRuleCall_0_0_0; }
		
		//('=?' expr_right=ExprSimple)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'=?'
		public Keyword getEqualsSignQuestionMarkKeyword_0_1_0() { return cEqualsSignQuestionMarkKeyword_0_1_0; }
		
		//expr_right=ExprSimple
		public Assignment getExpr_rightAssignment_0_1_1() { return cExpr_rightAssignment_0_1_1; }
		
		//ExprSimple
		public RuleCall getExpr_rightExprSimpleParserRuleCall_0_1_1_0() { return cExpr_rightExprSimpleParserRuleCall_0_1_1_0; }
		
		//=> '(' sym=SYMBOL lexpr=LExpr ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//=> '('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//sym=SYMBOL
		public Assignment getSymAssignment_1_1() { return cSymAssignment_1_1; }
		
		//SYMBOL
		public RuleCall getSymSYMBOLTerminalRuleCall_1_1_0() { return cSymSYMBOLTerminalRuleCall_1_1_0; }
		
		//lexpr=LExpr
		public Assignment getLexprAssignment_1_2() { return cLexprAssignment_1_2; }
		
		//LExpr
		public RuleCall getLexprLExprParserRuleCall_1_2_0() { return cLexprLExprParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'(' expr=Expr ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_2_1_0() { return cExprExprParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class LExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.LExpr");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		//LExpr:
		//	expr+=Expr+;
		@Override public ParserRule getRule() { return rule; }
		
		//expr+=Expr+
		public Assignment getExprAssignment() { return cExprAssignment; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_0() { return cExprExprParserRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final ProgramElements pProgram;
	private final FunctionElements pFunction;
	private final DefinitionElements pDefinition;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final NopElements pNop;
	private final AssignElements pAssign;
	private final WhileElements pWhile;
	private final ForElements pFor;
	private final IfElements pIf;
	private final ForeachElements pForeach;
	private final VarsElements pVars;
	private final ExprsElements pExprs;
	private final ExprElements pExpr;
	private final ExprSimpleElements pExprSimple;
	private final ExprAndElements pExprAnd;
	private final ExprOrElements pExprOr;
	private final ExprNotElements pExprNot;
	private final ExprEqElements pExprEq;
	private final LExprElements pLExpr;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tVARIABLE;
	private final TerminalRule tCR;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WhGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProgram = new ProgramElements();
		this.pFunction = new FunctionElements();
		this.pDefinition = new DefinitionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.pNop = new NopElements();
		this.pAssign = new AssignElements();
		this.pWhile = new WhileElements();
		this.pFor = new ForElements();
		this.pIf = new IfElements();
		this.pForeach = new ForeachElements();
		this.pVars = new VarsElements();
		this.pExprs = new ExprsElements();
		this.pExpr = new ExprElements();
		this.pExprSimple = new ExprSimpleElements();
		this.pExprAnd = new ExprAndElements();
		this.pExprOr = new ExprOrElements();
		this.pExprNot = new ExprNotElements();
		this.pExprEq = new ExprEqElements();
		this.pLExpr = new LExprElements();
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.SYMBOL");
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.VARIABLE");
		this.tCR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.wh.Wh.CR");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.comp.wh.Wh".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*Model:
	//	program += Program;	
	//	
	//Program:
	//	(Function)+;
	//
	//Function:
	//	'function' SYMBOL ':' Definition;
	//	
	//Definition:
	//	'read' Input '%' Commands '%' 'write' Output;
	//	
	//Input:
	//	VARIABLE (',' VARIABLE)*;
	//	
	//Output:
	//	VARIABLE (',' VARIABLE)*;
	//		
	//Commands :
	//	Command (';' Command)*;
	//	
	//Command:
	//	'nop' |
	//	Vars ':=' Exprs |
	//	'while' CommandBody |
	//	'for' CommandBody |
	//	'if' Expr 'then' Commands ('else' Commands)? 'fi' |
	//	'foreach' Expr 'in' CommandBody;
	//
	//CommandBody :
	//	Expr 'do' Commands 'od';
	//	
	//Vars:
	//	VARIABLE (',' VARIABLE)*;
	//	
	//Exprs:
	//	Expr (',' Expr)*;
	//	
	//Expr:
	//	ExprAnd;
	//	
	//LExpr:
	//	(Expr)+;
	//	
	//ExprSimple:
	//	'nil' | VARIABLE | SYMBOL | 
	//	'(' 'cons' LExpr ')' | '(' 'list' LExpr ')' |
	//	'(' 'hd' Expr ')' | '(' 'tl' Expr ')' |
	//	(=> '(' SYMBOL LExpr ')');
	//	
	//ExprAnd:
	//	ExprOr ('and' ExprOr)*;
	//	
	//ExprOr:
	//	ExprNot ('or' ExprNot)*;
	//	
	//ExprNot:
	//	'not'? ExprEq;
	//	
	//ExprEq:
	//	ExprSimple ('=?' ExprSimple)? | '(' Expr ')';
	//	
	//terminal SYMBOL: ('a'..'z') ('0'..'9'|'a'..'z'|'A'..'Z')* ((('-'|'+'|'.'|'/'|'_'|'&') | '->') ('0'..'9'|'a'..'z'|'A'..'Z')+)* ('?'|'!')?;
	//terminal VARIABLE : ('A'..'Z') ('0'..'9'|'a'..'z'|'A'..'Z')* ((('-'|'+'|'.'|'/'|'_'|'&') | '->') ('0'..'9'|'a'..'z'|'A'..'Z')+)* ('?'|'!')?;
	//
	//*/ Model:
	//	text=Program;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Program:
	//	functions+=Function+;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Function:
	//	'function' fname=SYMBOL ':' definition=Definition;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Definition:
	//	'read' inputs=Input
	//	'%' commands=Commands
	//	'%' 'write' outputs=Output;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Input:
	//	params+=VARIABLE (',' params+=VARIABLE)*;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	r_values+=VARIABLE (',' r_values+=VARIABLE)*;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Commands:
	//	command+=Command (';' command+=Command)*;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}
	
	//Command:
	//	command=Nop | command=Assign | command=While | command=For | command=If | command=Foreach;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Nop:
	//	nop='nop';
	public NopElements getNopAccess() {
		return pNop;
	}
	
	public ParserRule getNopRule() {
		return getNopAccess().getRule();
	}
	
	//Assign:
	//	vars=Vars ':=' exprs=Exprs;
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}
	
	//While:
	//	'while' cond=Expr 'do' commands=Commands 'od';
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//For:
	//	'for' cond=Expr 'do' commands=Commands 'od';
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//If:
	//	'if' cond=Expr 'then' if_commands=Commands ('else' else_commands=Commands)? 'fi';
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Foreach:
	//	'foreach' cond=Expr 'in' ens=Expr 'do' commands=Commands 'od';
	public ForeachElements getForeachAccess() {
		return pForeach;
	}
	
	public ParserRule getForeachRule() {
		return getForeachAccess().getRule();
	}
	
	//Vars:
	//	variables+=VARIABLE (',' variables+=VARIABLE)*;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}
	
	//Exprs:
	//	expr+=Expr (',' expr+=Expr)*;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}
	
	//Expr:
	//	expr_and=ExprAnd;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//ExprSimple:
	//	nil='nil' | variable=VARIABLE | sym=SYMBOL | '(' 'cons' cons_exp=LExpr ')' | '(' 'list' list_exp=LExpr ')' | '(' 'hd'
	//	hd_expr=Expr ')' | '(' 'tl' tl_expr=Expr ')';
	public ExprSimpleElements getExprSimpleAccess() {
		return pExprSimple;
	}
	
	public ParserRule getExprSimpleRule() {
		return getExprSimpleAccess().getRule();
	}
	
	//ExprAnd:
	//	expr_or+=ExprOr ('and' expr_or+=ExprOr)*;
	public ExprAndElements getExprAndAccess() {
		return pExprAnd;
	}
	
	public ParserRule getExprAndRule() {
		return getExprAndAccess().getRule();
	}
	
	//ExprOr:
	//	expr_not+=ExprNot ('or' expr_not+=ExprNot)*;
	public ExprOrElements getExprOrAccess() {
		return pExprOr;
	}
	
	public ParserRule getExprOrRule() {
		return getExprOrAccess().getRule();
	}
	
	//ExprNot:
	//	hasNot='not'? expr_eq=ExprEq;
	public ExprNotElements getExprNotAccess() {
		return pExprNot;
	}
	
	public ParserRule getExprNotRule() {
		return getExprNotAccess().getRule();
	}
	
	//ExprEq:
	//	expr_left=ExprSimple ('=?' expr_right=ExprSimple)? | => '(' sym=SYMBOL lexpr=LExpr ')' | '(' expr=Expr ')';
	public ExprEqElements getExprEqAccess() {
		return pExprEq;
	}
	
	public ParserRule getExprEqRule() {
		return getExprEqAccess().getRule();
	}
	
	//LExpr:
	//	expr+=Expr+;
	public LExprElements getLExprAccess() {
		return pLExpr;
	}
	
	public ParserRule getLExprRule() {
		return getLExprAccess().getRule();
	}
	
	//terminal SYMBOL:
	//	'a'..'z' ('0'..'9' | 'a'..'z' | 'A'..'Z')* ((('-' | '+' | '.' | '/' | '_' | '&') | '->') ('0'..'9' | 'a'..'z' |
	//	'A'..'Z')+)* ('?' | '!')?;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	}
	
	//terminal VARIABLE:
	//	'A'..'Z' ('0'..'9' | 'a'..'z' | 'A'..'Z')* ((('-' | '+' | '.' | '/' | '_' | '&') | '->') ('0'..'9' | 'a'..'z' |
	//	'A'..'Z')+)* ('?' | '!')?;
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal CR:
	//	'\r';
	public TerminalRule getCRRule() {
		return tCR;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
