/**
 * generated by Xtext 2.15.0
 */
package org.xtext.comp.wh.wh.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.comp.wh.wh.Expr;
import org.xtext.comp.wh.wh.ExprSimple;
import org.xtext.comp.wh.wh.LExpr;
import org.xtext.comp.wh.wh.WhPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr Simple</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.comp.wh.wh.impl.ExprSimpleImpl#getNil <em>Nil</em>}</li>
 *   <li>{@link org.xtext.comp.wh.wh.impl.ExprSimpleImpl#getVar <em>Var</em>}</li>
 *   <li>{@link org.xtext.comp.wh.wh.impl.ExprSimpleImpl#getSym <em>Sym</em>}</li>
 *   <li>{@link org.xtext.comp.wh.wh.impl.ExprSimpleImpl#getCons_exp <em>Cons exp</em>}</li>
 *   <li>{@link org.xtext.comp.wh.wh.impl.ExprSimpleImpl#getList_exp <em>List exp</em>}</li>
 *   <li>{@link org.xtext.comp.wh.wh.impl.ExprSimpleImpl#getHd_expr <em>Hd expr</em>}</li>
 *   <li>{@link org.xtext.comp.wh.wh.impl.ExprSimpleImpl#getTl_expr <em>Tl expr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprSimpleImpl extends MinimalEObjectImpl.Container implements ExprSimple
{
  /**
   * The default value of the '{@link #getNil() <em>Nil</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNil()
   * @generated
   * @ordered
   */
  protected static final String NIL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNil() <em>Nil</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNil()
   * @generated
   * @ordered
   */
  protected String nil = NIL_EDEFAULT;

  /**
   * The default value of the '{@link #getVar() <em>Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected static final String VAR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVar() <em>Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected String var = VAR_EDEFAULT;

  /**
   * The default value of the '{@link #getSym() <em>Sym</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSym()
   * @generated
   * @ordered
   */
  protected static final String SYM_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSym() <em>Sym</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSym()
   * @generated
   * @ordered
   */
  protected String sym = SYM_EDEFAULT;

  /**
   * The cached value of the '{@link #getCons_exp() <em>Cons exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCons_exp()
   * @generated
   * @ordered
   */
  protected LExpr cons_exp;

  /**
   * The cached value of the '{@link #getList_exp() <em>List exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getList_exp()
   * @generated
   * @ordered
   */
  protected LExpr list_exp;

  /**
   * The cached value of the '{@link #getHd_expr() <em>Hd expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHd_expr()
   * @generated
   * @ordered
   */
  protected Expr hd_expr;

  /**
   * The cached value of the '{@link #getTl_expr() <em>Tl expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTl_expr()
   * @generated
   * @ordered
   */
  protected Expr tl_expr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprSimpleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WhPackage.Literals.EXPR_SIMPLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getNil()
  {
    return nil;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNil(String newNil)
  {
    String oldNil = nil;
    nil = newNil;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhPackage.EXPR_SIMPLE__NIL, oldNil, nil));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getVar()
  {
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVar(String newVar)
  {
    String oldVar = var;
    var = newVar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhPackage.EXPR_SIMPLE__VAR, oldVar, var));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSym()
  {
    return sym;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSym(String newSym)
  {
    String oldSym = sym;
    sym = newSym;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhPackage.EXPR_SIMPLE__SYM, oldSym, sym));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LExpr getCons_exp()
  {
    return cons_exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCons_exp(LExpr newCons_exp, NotificationChain msgs)
  {
    LExpr oldCons_exp = cons_exp;
    cons_exp = newCons_exp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhPackage.EXPR_SIMPLE__CONS_EXP, oldCons_exp, newCons_exp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCons_exp(LExpr newCons_exp)
  {
    if (newCons_exp != cons_exp)
    {
      NotificationChain msgs = null;
      if (cons_exp != null)
        msgs = ((InternalEObject)cons_exp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPR_SIMPLE__CONS_EXP, null, msgs);
      if (newCons_exp != null)
        msgs = ((InternalEObject)newCons_exp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPR_SIMPLE__CONS_EXP, null, msgs);
      msgs = basicSetCons_exp(newCons_exp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhPackage.EXPR_SIMPLE__CONS_EXP, newCons_exp, newCons_exp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LExpr getList_exp()
  {
    return list_exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetList_exp(LExpr newList_exp, NotificationChain msgs)
  {
    LExpr oldList_exp = list_exp;
    list_exp = newList_exp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhPackage.EXPR_SIMPLE__LIST_EXP, oldList_exp, newList_exp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setList_exp(LExpr newList_exp)
  {
    if (newList_exp != list_exp)
    {
      NotificationChain msgs = null;
      if (list_exp != null)
        msgs = ((InternalEObject)list_exp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPR_SIMPLE__LIST_EXP, null, msgs);
      if (newList_exp != null)
        msgs = ((InternalEObject)newList_exp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPR_SIMPLE__LIST_EXP, null, msgs);
      msgs = basicSetList_exp(newList_exp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhPackage.EXPR_SIMPLE__LIST_EXP, newList_exp, newList_exp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getHd_expr()
  {
    return hd_expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHd_expr(Expr newHd_expr, NotificationChain msgs)
  {
    Expr oldHd_expr = hd_expr;
    hd_expr = newHd_expr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhPackage.EXPR_SIMPLE__HD_EXPR, oldHd_expr, newHd_expr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHd_expr(Expr newHd_expr)
  {
    if (newHd_expr != hd_expr)
    {
      NotificationChain msgs = null;
      if (hd_expr != null)
        msgs = ((InternalEObject)hd_expr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPR_SIMPLE__HD_EXPR, null, msgs);
      if (newHd_expr != null)
        msgs = ((InternalEObject)newHd_expr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPR_SIMPLE__HD_EXPR, null, msgs);
      msgs = basicSetHd_expr(newHd_expr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhPackage.EXPR_SIMPLE__HD_EXPR, newHd_expr, newHd_expr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getTl_expr()
  {
    return tl_expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTl_expr(Expr newTl_expr, NotificationChain msgs)
  {
    Expr oldTl_expr = tl_expr;
    tl_expr = newTl_expr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhPackage.EXPR_SIMPLE__TL_EXPR, oldTl_expr, newTl_expr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTl_expr(Expr newTl_expr)
  {
    if (newTl_expr != tl_expr)
    {
      NotificationChain msgs = null;
      if (tl_expr != null)
        msgs = ((InternalEObject)tl_expr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPR_SIMPLE__TL_EXPR, null, msgs);
      if (newTl_expr != null)
        msgs = ((InternalEObject)newTl_expr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPR_SIMPLE__TL_EXPR, null, msgs);
      msgs = basicSetTl_expr(newTl_expr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhPackage.EXPR_SIMPLE__TL_EXPR, newTl_expr, newTl_expr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_SIMPLE__CONS_EXP:
        return basicSetCons_exp(null, msgs);
      case WhPackage.EXPR_SIMPLE__LIST_EXP:
        return basicSetList_exp(null, msgs);
      case WhPackage.EXPR_SIMPLE__HD_EXPR:
        return basicSetHd_expr(null, msgs);
      case WhPackage.EXPR_SIMPLE__TL_EXPR:
        return basicSetTl_expr(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_SIMPLE__NIL:
        return getNil();
      case WhPackage.EXPR_SIMPLE__VAR:
        return getVar();
      case WhPackage.EXPR_SIMPLE__SYM:
        return getSym();
      case WhPackage.EXPR_SIMPLE__CONS_EXP:
        return getCons_exp();
      case WhPackage.EXPR_SIMPLE__LIST_EXP:
        return getList_exp();
      case WhPackage.EXPR_SIMPLE__HD_EXPR:
        return getHd_expr();
      case WhPackage.EXPR_SIMPLE__TL_EXPR:
        return getTl_expr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_SIMPLE__NIL:
        setNil((String)newValue);
        return;
      case WhPackage.EXPR_SIMPLE__VAR:
        setVar((String)newValue);
        return;
      case WhPackage.EXPR_SIMPLE__SYM:
        setSym((String)newValue);
        return;
      case WhPackage.EXPR_SIMPLE__CONS_EXP:
        setCons_exp((LExpr)newValue);
        return;
      case WhPackage.EXPR_SIMPLE__LIST_EXP:
        setList_exp((LExpr)newValue);
        return;
      case WhPackage.EXPR_SIMPLE__HD_EXPR:
        setHd_expr((Expr)newValue);
        return;
      case WhPackage.EXPR_SIMPLE__TL_EXPR:
        setTl_expr((Expr)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_SIMPLE__NIL:
        setNil(NIL_EDEFAULT);
        return;
      case WhPackage.EXPR_SIMPLE__VAR:
        setVar(VAR_EDEFAULT);
        return;
      case WhPackage.EXPR_SIMPLE__SYM:
        setSym(SYM_EDEFAULT);
        return;
      case WhPackage.EXPR_SIMPLE__CONS_EXP:
        setCons_exp((LExpr)null);
        return;
      case WhPackage.EXPR_SIMPLE__LIST_EXP:
        setList_exp((LExpr)null);
        return;
      case WhPackage.EXPR_SIMPLE__HD_EXPR:
        setHd_expr((Expr)null);
        return;
      case WhPackage.EXPR_SIMPLE__TL_EXPR:
        setTl_expr((Expr)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_SIMPLE__NIL:
        return NIL_EDEFAULT == null ? nil != null : !NIL_EDEFAULT.equals(nil);
      case WhPackage.EXPR_SIMPLE__VAR:
        return VAR_EDEFAULT == null ? var != null : !VAR_EDEFAULT.equals(var);
      case WhPackage.EXPR_SIMPLE__SYM:
        return SYM_EDEFAULT == null ? sym != null : !SYM_EDEFAULT.equals(sym);
      case WhPackage.EXPR_SIMPLE__CONS_EXP:
        return cons_exp != null;
      case WhPackage.EXPR_SIMPLE__LIST_EXP:
        return list_exp != null;
      case WhPackage.EXPR_SIMPLE__HD_EXPR:
        return hd_expr != null;
      case WhPackage.EXPR_SIMPLE__TL_EXPR:
        return tl_expr != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (nil: ");
    result.append(nil);
    result.append(", var: ");
    result.append(var);
    result.append(", sym: ");
    result.append(sym);
    result.append(')');
    return result.toString();
  }

} //ExprSimpleImpl
