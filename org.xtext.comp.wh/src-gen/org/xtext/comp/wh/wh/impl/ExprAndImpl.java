/**
 * generated by Xtext 2.15.0
 */
package org.xtext.comp.wh.wh.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.comp.wh.wh.ExprAnd;
import org.xtext.comp.wh.wh.ExprOr;
import org.xtext.comp.wh.wh.WhPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr And</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.comp.wh.wh.impl.ExprAndImpl#getEo <em>Eo</em>}</li>
 *   <li>{@link org.xtext.comp.wh.wh.impl.ExprAndImpl#getEo2 <em>Eo2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprAndImpl extends MinimalEObjectImpl.Container implements ExprAnd
{
  /**
   * The cached value of the '{@link #getEo() <em>Eo</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEo()
   * @generated
   * @ordered
   */
  protected ExprOr eo;

  /**
   * The cached value of the '{@link #getEo2() <em>Eo2</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEo2()
   * @generated
   * @ordered
   */
  protected EList<ExprOr> eo2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprAndImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WhPackage.Literals.EXPR_AND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExprOr getEo()
  {
    return eo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEo(ExprOr newEo, NotificationChain msgs)
  {
    ExprOr oldEo = eo;
    eo = newEo;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhPackage.EXPR_AND__EO, oldEo, newEo);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEo(ExprOr newEo)
  {
    if (newEo != eo)
    {
      NotificationChain msgs = null;
      if (eo != null)
        msgs = ((InternalEObject)eo).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPR_AND__EO, null, msgs);
      if (newEo != null)
        msgs = ((InternalEObject)newEo).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPR_AND__EO, null, msgs);
      msgs = basicSetEo(newEo, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhPackage.EXPR_AND__EO, newEo, newEo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ExprOr> getEo2()
  {
    if (eo2 == null)
    {
      eo2 = new EObjectContainmentEList<ExprOr>(ExprOr.class, this, WhPackage.EXPR_AND__EO2);
    }
    return eo2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_AND__EO:
        return basicSetEo(null, msgs);
      case WhPackage.EXPR_AND__EO2:
        return ((InternalEList<?>)getEo2()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_AND__EO:
        return getEo();
      case WhPackage.EXPR_AND__EO2:
        return getEo2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_AND__EO:
        setEo((ExprOr)newValue);
        return;
      case WhPackage.EXPR_AND__EO2:
        getEo2().clear();
        getEo2().addAll((Collection<? extends ExprOr>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_AND__EO:
        setEo((ExprOr)null);
        return;
      case WhPackage.EXPR_AND__EO2:
        getEo2().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_AND__EO:
        return eo != null;
      case WhPackage.EXPR_AND__EO2:
        return eo2 != null && !eo2.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ExprAndImpl
