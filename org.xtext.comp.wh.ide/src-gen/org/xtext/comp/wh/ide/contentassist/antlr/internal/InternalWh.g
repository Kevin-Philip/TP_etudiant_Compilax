/*
 * generated by Xtext 2.15.0
 */
grammar InternalWh;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.comp.wh.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.comp.wh.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.comp.wh.services.WhGrammarAccess;

}
@parser::members {
	private WhGrammarAccess grammarAccess;

	public void setGrammarAccess(WhGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getTextAssignment()); }
		(rule__Model__TextAssignment)
		{ after(grammarAccess.getModelAccess().getTextAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getProgramAccess().getFunctionsAssignment()); }
			(rule__Program__FunctionsAssignment)
			{ after(grammarAccess.getProgramAccess().getFunctionsAssignment()); }
		)
		(
			{ before(grammarAccess.getProgramAccess().getFunctionsAssignment()); }
			(rule__Program__FunctionsAssignment)*
			{ after(grammarAccess.getProgramAccess().getFunctionsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefinition
entryRuleDefinition
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruleDefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule Definition
ruleDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefinitionAccess().getGroup()); }
		(rule__Definition__Group__0)
		{ after(grammarAccess.getDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInput
entryRuleInput
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInputAccess().getGroup()); }
		(rule__Input__Group__0)
		{ after(grammarAccess.getInputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOutput
entryRuleOutput
:
{ before(grammarAccess.getOutputRule()); }
	 ruleOutput
{ after(grammarAccess.getOutputRule()); } 
	 EOF 
;

// Rule Output
ruleOutput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOutputAccess().getGroup()); }
		(rule__Output__Group__0)
		{ after(grammarAccess.getOutputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommands
entryRuleCommands
:
{ before(grammarAccess.getCommandsRule()); }
	 ruleCommands
{ after(grammarAccess.getCommandsRule()); } 
	 EOF 
;

// Rule Commands
ruleCommands 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandsAccess().getGroup()); }
		(rule__Commands__Group__0)
		{ after(grammarAccess.getCommandsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getAlternatives()); }
		(rule__Command__Alternatives)
		{ after(grammarAccess.getCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssign
entryRuleAssign
:
{ before(grammarAccess.getAssignRule()); }
	 ruleAssign
{ after(grammarAccess.getAssignRule()); } 
	 EOF 
;

// Rule Assign
ruleAssign 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignAccess().getGroup()); }
		(rule__Assign__Group__0)
		{ after(grammarAccess.getAssignAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhile
entryRuleWhile
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileAccess().getGroup()); }
		(rule__While__Group__0)
		{ after(grammarAccess.getWhileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFor
entryRuleFor
:
{ before(grammarAccess.getForRule()); }
	 ruleFor
{ after(grammarAccess.getForRule()); } 
	 EOF 
;

// Rule For
ruleFor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForAccess().getGroup()); }
		(rule__For__Group__0)
		{ after(grammarAccess.getForAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForeach
entryRuleForeach
:
{ before(grammarAccess.getForeachRule()); }
	 ruleForeach
{ after(grammarAccess.getForeachRule()); } 
	 EOF 
;

// Rule Foreach
ruleForeach 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForeachAccess().getGroup()); }
		(rule__Foreach__Group__0)
		{ after(grammarAccess.getForeachAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVars
entryRuleVars
:
{ before(grammarAccess.getVarsRule()); }
	 ruleVars
{ after(grammarAccess.getVarsRule()); } 
	 EOF 
;

// Rule Vars
ruleVars 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarsAccess().getGroup()); }
		(rule__Vars__Group__0)
		{ after(grammarAccess.getVarsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExprs
entryRuleExprs
:
{ before(grammarAccess.getExprsRule()); }
	 ruleExprs
{ after(grammarAccess.getExprsRule()); } 
	 EOF 
;

// Rule Exprs
ruleExprs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprsAccess().getGroup()); }
		(rule__Exprs__Group__0)
		{ after(grammarAccess.getExprsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpr
entryRuleExpr
:
{ before(grammarAccess.getExprRule()); }
	 ruleExpr
{ after(grammarAccess.getExprRule()); } 
	 EOF 
;

// Rule Expr
ruleExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprAccess().getEaAssignment()); }
		(rule__Expr__EaAssignment)
		{ after(grammarAccess.getExprAccess().getEaAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExprSimple
entryRuleExprSimple
:
{ before(grammarAccess.getExprSimpleRule()); }
	 ruleExprSimple
{ after(grammarAccess.getExprSimpleRule()); } 
	 EOF 
;

// Rule ExprSimple
ruleExprSimple 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprSimpleAccess().getAlternatives()); }
		(rule__ExprSimple__Alternatives)
		{ after(grammarAccess.getExprSimpleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExprAnd
entryRuleExprAnd
:
{ before(grammarAccess.getExprAndRule()); }
	 ruleExprAnd
{ after(grammarAccess.getExprAndRule()); } 
	 EOF 
;

// Rule ExprAnd
ruleExprAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprAndAccess().getGroup()); }
		(rule__ExprAnd__Group__0)
		{ after(grammarAccess.getExprAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExprOr
entryRuleExprOr
:
{ before(grammarAccess.getExprOrRule()); }
	 ruleExprOr
{ after(grammarAccess.getExprOrRule()); } 
	 EOF 
;

// Rule ExprOr
ruleExprOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprOrAccess().getGroup()); }
		(rule__ExprOr__Group__0)
		{ after(grammarAccess.getExprOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExprNot
entryRuleExprNot
:
{ before(grammarAccess.getExprNotRule()); }
	 ruleExprNot
{ after(grammarAccess.getExprNotRule()); } 
	 EOF 
;

// Rule ExprNot
ruleExprNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprNotAccess().getAlternatives()); }
		(rule__ExprNot__Alternatives)
		{ after(grammarAccess.getExprNotAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExprEq
entryRuleExprEq
:
{ before(grammarAccess.getExprEqRule()); }
	 ruleExprEq
{ after(grammarAccess.getExprEqRule()); } 
	 EOF 
;

// Rule ExprEq
ruleExprEq 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprEqAccess().getAlternatives()); }
		(rule__ExprEq__Alternatives)
		{ after(grammarAccess.getExprEqAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLExpr
entryRuleLExpr
:
{ before(grammarAccess.getLExprRule()); }
	 ruleLExpr
{ after(grammarAccess.getLExprRule()); } 
	 EOF 
;

// Rule LExpr
ruleLExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getLExprAccess().getLeAssignment()); }
			(rule__LExpr__LeAssignment)
			{ after(grammarAccess.getLExprAccess().getLeAssignment()); }
		)
		(
			{ before(grammarAccess.getLExprAccess().getLeAssignment()); }
			(rule__LExpr__LeAssignment)*
			{ after(grammarAccess.getLExprAccess().getLeAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getNopAssignment_0()); }
		(rule__Command__NopAssignment_0)
		{ after(grammarAccess.getCommandAccess().getNopAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getAssignAssignment_1()); }
		(rule__Command__AssignAssignment_1)
		{ after(grammarAccess.getCommandAccess().getAssignAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getWhAssignment_2()); }
		(rule__Command__WhAssignment_2)
		{ after(grammarAccess.getCommandAccess().getWhAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getForAssignment_3()); }
		(rule__Command__ForAssignment_3)
		{ after(grammarAccess.getCommandAccess().getForAssignment_3()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getIfAssignment_4()); }
		(rule__Command__IfAssignment_4)
		{ after(grammarAccess.getCommandAccess().getIfAssignment_4()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getForeachAssignment_5()); }
		(rule__Command__ForeachAssignment_5)
		{ after(grammarAccess.getCommandAccess().getForeachAssignment_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getNilAssignment_0()); }
		(rule__ExprSimple__NilAssignment_0)
		{ after(grammarAccess.getExprSimpleAccess().getNilAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getVarAssignment_1()); }
		(rule__ExprSimple__VarAssignment_1)
		{ after(grammarAccess.getExprSimpleAccess().getVarAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getSymAssignment_2()); }
		(rule__ExprSimple__SymAssignment_2)
		{ after(grammarAccess.getExprSimpleAccess().getSymAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getGroup_3()); }
		(rule__ExprSimple__Group_3__0)
		{ after(grammarAccess.getExprSimpleAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getGroup_4()); }
		(rule__ExprSimple__Group_4__0)
		{ after(grammarAccess.getExprSimpleAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getGroup_5()); }
		(rule__ExprSimple__Group_5__0)
		{ after(grammarAccess.getExprSimpleAccess().getGroup_5()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getGroup_6()); }
		(rule__ExprSimple__Group_6__0)
		{ after(grammarAccess.getExprSimpleAccess().getGroup_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprNotAccess().getGroup_0()); }
		(rule__ExprNot__Group_0__0)
		{ after(grammarAccess.getExprNotAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExprNotAccess().getE2Assignment_1()); }
		(rule__ExprNot__E2Assignment_1)
		{ after(grammarAccess.getExprNotAccess().getE2Assignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprEqAccess().getGroup_0()); }
		(rule__ExprEq__Group_0__0)
		{ after(grammarAccess.getExprEqAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExprEqAccess().getGroup_1()); }
		(rule__ExprEq__Group_1__0)
		{ after(grammarAccess.getExprEqAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
	'function'
	{ after(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getFnameAssignment_1()); }
	(rule__Function__FnameAssignment_1)
	{ after(grammarAccess.getFunctionAccess().getFnameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getFunctionAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getDefinitionAssignment_3()); }
	(rule__Function__DefinitionAssignment_3)
	{ after(grammarAccess.getFunctionAccess().getDefinitionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__0__Impl
	rule__Definition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getReadKeyword_0()); }
	'read'
	{ after(grammarAccess.getDefinitionAccess().getReadKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__1__Impl
	rule__Definition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getInputsAssignment_1()); }
	(rule__Definition__InputsAssignment_1)
	{ after(grammarAccess.getDefinitionAccess().getInputsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__2__Impl
	rule__Definition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getPercentSignKeyword_2()); }
	'%'
	{ after(grammarAccess.getDefinitionAccess().getPercentSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__3__Impl
	rule__Definition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getCommandsAssignment_3()); }
	(rule__Definition__CommandsAssignment_3)
	{ after(grammarAccess.getDefinitionAccess().getCommandsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__4__Impl
	rule__Definition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getPercentSignKeyword_4()); }
	'%'
	{ after(grammarAccess.getDefinitionAccess().getPercentSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__5__Impl
	rule__Definition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getWriteKeyword_5()); }
	'write'
	{ after(grammarAccess.getDefinitionAccess().getWriteKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getOutputsAssignment_6()); }
	(rule__Definition__OutputsAssignment_6)
	{ after(grammarAccess.getDefinitionAccess().getOutputsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__0__Impl
	rule__Input__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getParamsAssignment_0()); }
	(rule__Input__ParamsAssignment_0)
	{ after(grammarAccess.getInputAccess().getParamsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getGroup_1()); }
	(rule__Input__Group_1__0)*
	{ after(grammarAccess.getInputAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group_1__0__Impl
	rule__Input__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getInputAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getParamsAssignment_1_1()); }
	(rule__Input__ParamsAssignment_1_1)
	{ after(grammarAccess.getInputAccess().getParamsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__0__Impl
	rule__Output__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getR_valuesAssignment_0()); }
	(rule__Output__R_valuesAssignment_0)
	{ after(grammarAccess.getOutputAccess().getR_valuesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getGroup_1()); }
	(rule__Output__Group_1__0)*
	{ after(grammarAccess.getOutputAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group_1__0__Impl
	rule__Output__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getOutputAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getR_valuesAssignment_1_1()); }
	(rule__Output__R_valuesAssignment_1_1)
	{ after(grammarAccess.getOutputAccess().getR_valuesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Commands__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group__0__Impl
	rule__Commands__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getCommandAssignment_0()); }
	(rule__Commands__CommandAssignment_0)
	{ after(grammarAccess.getCommandsAccess().getCommandAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getGroup_1()); }
	(rule__Commands__Group_1__0)*
	{ after(grammarAccess.getCommandsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Commands__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group_1__0__Impl
	rule__Commands__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getSemicolonKeyword_1_0()); }
	';'
	{ after(grammarAccess.getCommandsAccess().getSemicolonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getCommandAssignment_1_1()); }
	(rule__Commands__CommandAssignment_1_1)
	{ after(grammarAccess.getCommandsAccess().getCommandAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assign__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group__0__Impl
	rule__Assign__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getVarsAssignment_0()); }
	(rule__Assign__VarsAssignment_0)
	{ after(grammarAccess.getAssignAccess().getVarsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group__1__Impl
	rule__Assign__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getColonEqualsSignKeyword_1()); }
	':='
	{ after(grammarAccess.getAssignAccess().getColonEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getExprsAssignment_2()); }
	(rule__Assign__ExprsAssignment_2)
	{ after(grammarAccess.getAssignAccess().getExprsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getCondAssignment_1()); }
	(rule__While__CondAssignment_1)
	{ after(grammarAccess.getWhileAccess().getCondAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__2__Impl
	rule__While__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getDoKeyword_2()); }
	'do'
	{ after(grammarAccess.getWhileAccess().getDoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__3__Impl
	rule__While__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getCommandsAssignment_3()); }
	(rule__While__CommandsAssignment_3)
	{ after(grammarAccess.getWhileAccess().getCommandsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getOdKeyword_4()); }
	'od'
	{ after(grammarAccess.getWhileAccess().getOdKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__0__Impl
	rule__For__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getForAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__1__Impl
	rule__For__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getCondAssignment_1()); }
	(rule__For__CondAssignment_1)
	{ after(grammarAccess.getForAccess().getCondAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__2__Impl
	rule__For__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getDoKeyword_2()); }
	'do'
	{ after(grammarAccess.getForAccess().getDoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__3__Impl
	rule__For__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getCommandsAssignment_3()); }
	(rule__For__CommandsAssignment_3)
	{ after(grammarAccess.getForAccess().getCommandsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getOdKeyword_4()); }
	'od'
	{ after(grammarAccess.getForAccess().getOdKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getCondAssignment_1()); }
	(rule__If__CondAssignment_1)
	{ after(grammarAccess.getIfAccess().getCondAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getThenKeyword_2()); }
	'then'
	{ after(grammarAccess.getIfAccess().getThenKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__3__Impl
	rule__If__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIf_commandsAssignment_3()); }
	(rule__If__If_commandsAssignment_3)
	{ after(grammarAccess.getIfAccess().getIf_commandsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__4__Impl
	rule__If__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getGroup_4()); }
	(rule__If__Group_4__0)?
	{ after(grammarAccess.getIfAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getFiKeyword_5()); }
	'fi'
	{ after(grammarAccess.getIfAccess().getFiKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_4__0__Impl
	rule__If__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getElseKeyword_4_0()); }
	'else'
	{ after(grammarAccess.getIfAccess().getElseKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getElse_commandsAssignment_4_1()); }
	(rule__If__Else_commandsAssignment_4_1)
	{ after(grammarAccess.getIfAccess().getElse_commandsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__0__Impl
	rule__Foreach__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getForeachKeyword_0()); }
	'foreach'
	{ after(grammarAccess.getForeachAccess().getForeachKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__1__Impl
	rule__Foreach__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getExprAssignment_1()); }
	(rule__Foreach__ExprAssignment_1)
	{ after(grammarAccess.getForeachAccess().getExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__2__Impl
	rule__Foreach__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getInKeyword_2()); }
	'in'
	{ after(grammarAccess.getForeachAccess().getInKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__3__Impl
	rule__Foreach__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getE2Assignment_3()); }
	(rule__Foreach__E2Assignment_3)
	{ after(grammarAccess.getForeachAccess().getE2Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__4__Impl
	rule__Foreach__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getDoKeyword_4()); }
	'do'
	{ after(grammarAccess.getForeachAccess().getDoKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__5__Impl
	rule__Foreach__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getCommandsAssignment_5()); }
	(rule__Foreach__CommandsAssignment_5)
	{ after(grammarAccess.getForeachAccess().getCommandsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getOdKeyword_6()); }
	'od'
	{ after(grammarAccess.getForeachAccess().getOdKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Vars__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vars__Group__0__Impl
	rule__Vars__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarsAccess().getVarAssignment_0()); }
	(rule__Vars__VarAssignment_0)
	{ after(grammarAccess.getVarsAccess().getVarAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vars__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarsAccess().getGroup_1()); }
	(rule__Vars__Group_1__0)*
	{ after(grammarAccess.getVarsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Vars__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vars__Group_1__0__Impl
	rule__Vars__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarsAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getVarsAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vars__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarsAccess().getVarAssignment_1_1()); }
	(rule__Vars__VarAssignment_1_1)
	{ after(grammarAccess.getVarsAccess().getVarAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exprs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exprs__Group__0__Impl
	rule__Exprs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsAccess().getEAssignment_0()); }
	(rule__Exprs__EAssignment_0)
	{ after(grammarAccess.getExprsAccess().getEAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exprs__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsAccess().getGroup_1()); }
	(rule__Exprs__Group_1__0)*
	{ after(grammarAccess.getExprsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exprs__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exprs__Group_1__0__Impl
	rule__Exprs__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getExprsAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exprs__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsAccess().getEAssignment_1_1()); }
	(rule__Exprs__EAssignment_1_1)
	{ after(grammarAccess.getExprsAccess().getEAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_3__0__Impl
	rule__ExprSimple__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_3_0()); }
	'('
	{ after(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_3__1__Impl
	rule__ExprSimple__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getConsKeyword_3_1()); }
	'cons'
	{ after(grammarAccess.getExprSimpleAccess().getConsKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_3__2__Impl
	rule__ExprSimple__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getCons_expAssignment_3_2()); }
	(rule__ExprSimple__Cons_expAssignment_3_2)
	{ after(grammarAccess.getExprSimpleAccess().getCons_expAssignment_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_3_3()); }
	')'
	{ after(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_4__0__Impl
	rule__ExprSimple__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_4_0()); }
	'('
	{ after(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_4__1__Impl
	rule__ExprSimple__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getListKeyword_4_1()); }
	'list'
	{ after(grammarAccess.getExprSimpleAccess().getListKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_4__2__Impl
	rule__ExprSimple__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getList_expAssignment_4_2()); }
	(rule__ExprSimple__List_expAssignment_4_2)
	{ after(grammarAccess.getExprSimpleAccess().getList_expAssignment_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_4_3()); }
	')'
	{ after(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_5__0__Impl
	rule__ExprSimple__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_5_0()); }
	'('
	{ after(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_5__1__Impl
	rule__ExprSimple__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getHdKeyword_5_1()); }
	'hd'
	{ after(grammarAccess.getExprSimpleAccess().getHdKeyword_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_5__2__Impl
	rule__ExprSimple__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getHd_exprAssignment_5_2()); }
	(rule__ExprSimple__Hd_exprAssignment_5_2)
	{ after(grammarAccess.getExprSimpleAccess().getHd_exprAssignment_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_5__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_5_3()); }
	')'
	{ after(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_5_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_6__0__Impl
	rule__ExprSimple__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_6_0()); }
	'('
	{ after(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_6__1__Impl
	rule__ExprSimple__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getTlKeyword_6_1()); }
	'tl'
	{ after(grammarAccess.getExprSimpleAccess().getTlKeyword_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_6__2__Impl
	rule__ExprSimple__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getTl_exprAssignment_6_2()); }
	(rule__ExprSimple__Tl_exprAssignment_6_2)
	{ after(grammarAccess.getExprSimpleAccess().getTl_exprAssignment_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_6__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_6__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_6__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_6_3()); }
	')'
	{ after(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_6_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprAnd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprAnd__Group__0__Impl
	rule__ExprAnd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprAndAccess().getEoAssignment_0()); }
	(rule__ExprAnd__EoAssignment_0)
	{ after(grammarAccess.getExprAndAccess().getEoAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprAnd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprAndAccess().getGroup_1()); }
	(rule__ExprAnd__Group_1__0)*
	{ after(grammarAccess.getExprAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprAnd__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprAnd__Group_1__0__Impl
	rule__ExprAnd__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprAndAccess().getAndKeyword_1_0()); }
	'and'
	{ after(grammarAccess.getExprAndAccess().getAndKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprAnd__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprAndAccess().getEoAssignment_1_1()); }
	(rule__ExprAnd__EoAssignment_1_1)
	{ after(grammarAccess.getExprAndAccess().getEoAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprOr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprOr__Group__0__Impl
	rule__ExprOr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprOrAccess().getEnAssignment_0()); }
	(rule__ExprOr__EnAssignment_0)
	{ after(grammarAccess.getExprOrAccess().getEnAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprOr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprOrAccess().getGroup_1()); }
	(rule__ExprOr__Group_1__0)*
	{ after(grammarAccess.getExprOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprOr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprOr__Group_1__0__Impl
	rule__ExprOr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprOrAccess().getOrKeyword_1_0()); }
	'or'
	{ after(grammarAccess.getExprOrAccess().getOrKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprOr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprOrAccess().getEnAssignment_1_1()); }
	(rule__ExprOr__EnAssignment_1_1)
	{ after(grammarAccess.getExprOrAccess().getEnAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprNot__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprNot__Group_0__0__Impl
	rule__ExprNot__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprNotAccess().getNotKeyword_0_0()); }
	'not'
	{ after(grammarAccess.getExprNotAccess().getNotKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprNot__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprNotAccess().getEAssignment_0_1()); }
	(rule__ExprNot__EAssignment_0_1)
	{ after(grammarAccess.getExprNotAccess().getEAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprEq__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprEq__Group_0__0__Impl
	rule__ExprEq__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprEqAccess().getEAssignment_0_0()); }
	(rule__ExprEq__EAssignment_0_0)
	{ after(grammarAccess.getExprEqAccess().getEAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprEq__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprEqAccess().getGroup_0_1()); }
	(rule__ExprEq__Group_0_1__0)?
	{ after(grammarAccess.getExprEqAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprEq__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprEq__Group_0_1__0__Impl
	rule__ExprEq__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprEqAccess().getEqualsSignQuestionMarkKeyword_0_1_0()); }
	'=?'
	{ after(grammarAccess.getExprEqAccess().getEqualsSignQuestionMarkKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprEq__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprEqAccess().getE2Assignment_0_1_1()); }
	(rule__ExprEq__E2Assignment_0_1_1)
	{ after(grammarAccess.getExprEqAccess().getE2Assignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprEq__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprEq__Group_1__0__Impl
	rule__ExprEq__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprEqAccess().getLeftParenthesisKeyword_1_0()); }
	('(')
	{ after(grammarAccess.getExprEqAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprEq__Group_1__1__Impl
	rule__ExprEq__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprEqAccess().getSYMBOLTerminalRuleCall_1_1()); }
	(RULE_SYMBOL)?
	{ after(grammarAccess.getExprEqAccess().getSYMBOLTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprEq__Group_1__2__Impl
	rule__ExprEq__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprEqAccess().getLExprParserRuleCall_1_2()); }
	ruleLExpr
	{ after(grammarAccess.getExprEqAccess().getLExprParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprEq__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprEqAccess().getRightParenthesisKeyword_1_3()); }
	')'
	{ after(grammarAccess.getExprEqAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__TextAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getTextProgramParserRuleCall_0()); }
		ruleProgram
		{ after(grammarAccess.getModelAccess().getTextProgramParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__FunctionsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_0()); }
		ruleFunction
		{ after(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__FnameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getFnameSYMBOLTerminalRuleCall_1_0()); }
		RULE_SYMBOL
		{ after(grammarAccess.getFunctionAccess().getFnameSYMBOLTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__DefinitionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getDefinitionDefinitionParserRuleCall_3_0()); }
		ruleDefinition
		{ after(grammarAccess.getFunctionAccess().getDefinitionDefinitionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__InputsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getInputsInputParserRuleCall_1_0()); }
		ruleInput
		{ after(grammarAccess.getDefinitionAccess().getInputsInputParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__CommandsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getCommandsCommandsParserRuleCall_3_0()); }
		ruleCommands
		{ after(grammarAccess.getDefinitionAccess().getCommandsCommandsParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__OutputsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getOutputsOutputParserRuleCall_6_0()); }
		ruleOutput
		{ after(grammarAccess.getDefinitionAccess().getOutputsOutputParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__ParamsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getParamsVARIABLETerminalRuleCall_0_0()); }
		RULE_VARIABLE
		{ after(grammarAccess.getInputAccess().getParamsVARIABLETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__ParamsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getParamsVARIABLETerminalRuleCall_1_1_0()); }
		RULE_VARIABLE
		{ after(grammarAccess.getInputAccess().getParamsVARIABLETerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__R_valuesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputAccess().getR_valuesVARIABLETerminalRuleCall_0_0()); }
		RULE_VARIABLE
		{ after(grammarAccess.getOutputAccess().getR_valuesVARIABLETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__R_valuesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputAccess().getR_valuesVARIABLETerminalRuleCall_1_1_0()); }
		RULE_VARIABLE
		{ after(grammarAccess.getOutputAccess().getR_valuesVARIABLETerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__CommandAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandsAccess().getCommandCommandParserRuleCall_0_0()); }
		ruleCommand
		{ after(grammarAccess.getCommandsAccess().getCommandCommandParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__CommandAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandsAccess().getCommandCommandParserRuleCall_1_1_0()); }
		ruleCommand
		{ after(grammarAccess.getCommandsAccess().getCommandCommandParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__NopAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getNopNopKeyword_0_0()); }
		(
			{ before(grammarAccess.getCommandAccess().getNopNopKeyword_0_0()); }
			'nop'
			{ after(grammarAccess.getCommandAccess().getNopNopKeyword_0_0()); }
		)
		{ after(grammarAccess.getCommandAccess().getNopNopKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__AssignAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getAssignAssignParserRuleCall_1_0()); }
		ruleAssign
		{ after(grammarAccess.getCommandAccess().getAssignAssignParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__WhAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getWhWhileParserRuleCall_2_0()); }
		ruleWhile
		{ after(grammarAccess.getCommandAccess().getWhWhileParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__ForAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getForForParserRuleCall_3_0()); }
		ruleFor
		{ after(grammarAccess.getCommandAccess().getForForParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__IfAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getIfIfParserRuleCall_4_0()); }
		ruleIf
		{ after(grammarAccess.getCommandAccess().getIfIfParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__ForeachAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getForeachForeachParserRuleCall_5_0()); }
		ruleForeach
		{ after(grammarAccess.getCommandAccess().getForeachForeachParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__VarsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignAccess().getVarsVarsParserRuleCall_0_0()); }
		ruleVars
		{ after(grammarAccess.getAssignAccess().getVarsVarsParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__ExprsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignAccess().getExprsExprsParserRuleCall_2_0()); }
		ruleExprs
		{ after(grammarAccess.getAssignAccess().getExprsExprsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__CondAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getCondExprParserRuleCall_1_0()); }
		ruleExpr
		{ after(grammarAccess.getWhileAccess().getCondExprParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__CommandsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getCommandsCommandsParserRuleCall_3_0()); }
		ruleCommands
		{ after(grammarAccess.getWhileAccess().getCommandsCommandsParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__CondAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getCondExprParserRuleCall_1_0()); }
		ruleExpr
		{ after(grammarAccess.getForAccess().getCondExprParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__CommandsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getCommandsCommandsParserRuleCall_3_0()); }
		ruleCommands
		{ after(grammarAccess.getForAccess().getCommandsCommandsParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__CondAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getCondExprParserRuleCall_1_0()); }
		ruleExpr
		{ after(grammarAccess.getIfAccess().getCondExprParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__If_commandsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getIf_commandsCommandsParserRuleCall_3_0()); }
		ruleCommands
		{ after(grammarAccess.getIfAccess().getIf_commandsCommandsParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Else_commandsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getElse_commandsCommandsParserRuleCall_4_1_0()); }
		ruleCommands
		{ after(grammarAccess.getIfAccess().getElse_commandsCommandsParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__ExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeachAccess().getExprExprParserRuleCall_1_0()); }
		ruleExpr
		{ after(grammarAccess.getForeachAccess().getExprExprParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__E2Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeachAccess().getE2ExprParserRuleCall_3_0()); }
		ruleExpr
		{ after(grammarAccess.getForeachAccess().getE2ExprParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__CommandsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeachAccess().getCommandsCommandsParserRuleCall_5_0()); }
		ruleCommands
		{ after(grammarAccess.getForeachAccess().getCommandsCommandsParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__VarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarsAccess().getVarVARIABLETerminalRuleCall_0_0()); }
		RULE_VARIABLE
		{ after(grammarAccess.getVarsAccess().getVarVARIABLETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__VarAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarsAccess().getVarVARIABLETerminalRuleCall_1_1_0()); }
		RULE_VARIABLE
		{ after(grammarAccess.getVarsAccess().getVarVARIABLETerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__EAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprsAccess().getEExprParserRuleCall_0_0()); }
		ruleExpr
		{ after(grammarAccess.getExprsAccess().getEExprParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__EAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprsAccess().getEExprParserRuleCall_1_1_0()); }
		ruleExpr
		{ after(grammarAccess.getExprsAccess().getEExprParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__EaAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprAccess().getEaExprAndParserRuleCall_0()); }
		ruleExprAnd
		{ after(grammarAccess.getExprAccess().getEaExprAndParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__NilAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getNilNilKeyword_0_0()); }
		(
			{ before(grammarAccess.getExprSimpleAccess().getNilNilKeyword_0_0()); }
			'nil'
			{ after(grammarAccess.getExprSimpleAccess().getNilNilKeyword_0_0()); }
		)
		{ after(grammarAccess.getExprSimpleAccess().getNilNilKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__VarAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getVarVARIABLETerminalRuleCall_1_0()); }
		RULE_VARIABLE
		{ after(grammarAccess.getExprSimpleAccess().getVarVARIABLETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__SymAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getSymSYMBOLTerminalRuleCall_2_0()); }
		RULE_SYMBOL
		{ after(grammarAccess.getExprSimpleAccess().getSymSYMBOLTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Cons_expAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getCons_expLExprParserRuleCall_3_2_0()); }
		ruleLExpr
		{ after(grammarAccess.getExprSimpleAccess().getCons_expLExprParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__List_expAssignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getList_expLExprParserRuleCall_4_2_0()); }
		ruleLExpr
		{ after(grammarAccess.getExprSimpleAccess().getList_expLExprParserRuleCall_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Hd_exprAssignment_5_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getHd_exprExprParserRuleCall_5_2_0()); }
		ruleExpr
		{ after(grammarAccess.getExprSimpleAccess().getHd_exprExprParserRuleCall_5_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Tl_exprAssignment_6_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getTl_exprExprParserRuleCall_6_2_0()); }
		ruleExpr
		{ after(grammarAccess.getExprSimpleAccess().getTl_exprExprParserRuleCall_6_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__EoAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprAndAccess().getEoExprOrParserRuleCall_0_0()); }
		ruleExprOr
		{ after(grammarAccess.getExprAndAccess().getEoExprOrParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__EoAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprAndAccess().getEoExprOrParserRuleCall_1_1_0()); }
		ruleExprOr
		{ after(grammarAccess.getExprAndAccess().getEoExprOrParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__EnAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprOrAccess().getEnExprNotParserRuleCall_0_0()); }
		ruleExprNot
		{ after(grammarAccess.getExprOrAccess().getEnExprNotParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__EnAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprOrAccess().getEnExprNotParserRuleCall_1_1_0()); }
		ruleExprNot
		{ after(grammarAccess.getExprOrAccess().getEnExprNotParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__EAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprNotAccess().getEExprEqParserRuleCall_0_1_0()); }
		ruleExprEq
		{ after(grammarAccess.getExprNotAccess().getEExprEqParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__E2Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprNotAccess().getE2ExprEqParserRuleCall_1_0()); }
		ruleExprEq
		{ after(grammarAccess.getExprNotAccess().getE2ExprEqParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__EAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprEqAccess().getEExprSimpleParserRuleCall_0_0_0()); }
		ruleExprSimple
		{ after(grammarAccess.getExprEqAccess().getEExprSimpleParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__E2Assignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprEqAccess().getE2ExprSimpleParserRuleCall_0_1_1_0()); }
		ruleExprSimple
		{ after(grammarAccess.getExprEqAccess().getE2ExprSimpleParserRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LExpr__LeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLExprAccess().getLeExprParserRuleCall_0()); }
		ruleExpr
		{ after(grammarAccess.getLExprAccess().getLeExprParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_VARIABLE : 'A'..'Z' ('A'..'Z'|'a'..'z'|'0'..'9')*;

RULE_SYMBOL : 'a'..'z' ('A'..'Z'|'a'..'z'|'0'..'9')*;

RULE_CR : '\r';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
