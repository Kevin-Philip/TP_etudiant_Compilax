/*
 * generated by Xtext 2.15.0
 */
package org.xtext.comp.wh.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.comp.wh.ide.contentassist.antlr.internal.InternalWhParser;
import org.xtext.comp.wh.services.WhGrammarAccess;

public class WhParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(WhGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, WhGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
			builder.put(grammarAccess.getExprSimpleAccess().getAlternatives(), "rule__ExprSimple__Alternatives");
			builder.put(grammarAccess.getExprNotAccess().getAlternatives(), "rule__ExprNot__Alternatives");
			builder.put(grammarAccess.getExprEqAccess().getAlternatives(), "rule__ExprEq__Alternatives");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup_1(), "rule__Input__Group_1__0");
			builder.put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
			builder.put(grammarAccess.getOutputAccess().getGroup_1(), "rule__Output__Group_1__0");
			builder.put(grammarAccess.getCommandsAccess().getGroup(), "rule__Commands__Group__0");
			builder.put(grammarAccess.getCommandsAccess().getGroup_1(), "rule__Commands__Group_1__0");
			builder.put(grammarAccess.getAssignAccess().getGroup(), "rule__Assign__Group__0");
			builder.put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
			builder.put(grammarAccess.getForAccess().getGroup(), "rule__For__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup_4(), "rule__If__Group_4__0");
			builder.put(grammarAccess.getForeachAccess().getGroup(), "rule__Foreach__Group__0");
			builder.put(grammarAccess.getVarsAccess().getGroup(), "rule__Vars__Group__0");
			builder.put(grammarAccess.getVarsAccess().getGroup_1(), "rule__Vars__Group_1__0");
			builder.put(grammarAccess.getExprsAccess().getGroup(), "rule__Exprs__Group__0");
			builder.put(grammarAccess.getExprsAccess().getGroup_1(), "rule__Exprs__Group_1__0");
			builder.put(grammarAccess.getExprSimpleAccess().getGroup_3(), "rule__ExprSimple__Group_3__0");
			builder.put(grammarAccess.getExprSimpleAccess().getGroup_4(), "rule__ExprSimple__Group_4__0");
			builder.put(grammarAccess.getExprSimpleAccess().getGroup_5(), "rule__ExprSimple__Group_5__0");
			builder.put(grammarAccess.getExprSimpleAccess().getGroup_6(), "rule__ExprSimple__Group_6__0");
			builder.put(grammarAccess.getExprAndAccess().getGroup(), "rule__ExprAnd__Group__0");
			builder.put(grammarAccess.getExprAndAccess().getGroup_1(), "rule__ExprAnd__Group_1__0");
			builder.put(grammarAccess.getExprOrAccess().getGroup(), "rule__ExprOr__Group__0");
			builder.put(grammarAccess.getExprOrAccess().getGroup_1(), "rule__ExprOr__Group_1__0");
			builder.put(grammarAccess.getExprNotAccess().getGroup_0(), "rule__ExprNot__Group_0__0");
			builder.put(grammarAccess.getExprEqAccess().getGroup_0(), "rule__ExprEq__Group_0__0");
			builder.put(grammarAccess.getExprEqAccess().getGroup_0_1(), "rule__ExprEq__Group_0_1__0");
			builder.put(grammarAccess.getExprEqAccess().getGroup_1(), "rule__ExprEq__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getTextAssignment(), "rule__Model__TextAssignment");
			builder.put(grammarAccess.getProgramAccess().getFunctionsAssignment(), "rule__Program__FunctionsAssignment");
			builder.put(grammarAccess.getFunctionAccess().getFnameAssignment_1(), "rule__Function__FnameAssignment_1");
			builder.put(grammarAccess.getFunctionAccess().getDefinitionAssignment_3(), "rule__Function__DefinitionAssignment_3");
			builder.put(grammarAccess.getDefinitionAccess().getInputsAssignment_1(), "rule__Definition__InputsAssignment_1");
			builder.put(grammarAccess.getDefinitionAccess().getCommandsAssignment_3(), "rule__Definition__CommandsAssignment_3");
			builder.put(grammarAccess.getDefinitionAccess().getOutputsAssignment_6(), "rule__Definition__OutputsAssignment_6");
			builder.put(grammarAccess.getInputAccess().getParamsAssignment_0(), "rule__Input__ParamsAssignment_0");
			builder.put(grammarAccess.getInputAccess().getParamsAssignment_1_1(), "rule__Input__ParamsAssignment_1_1");
			builder.put(grammarAccess.getOutputAccess().getR_valuesAssignment_0(), "rule__Output__R_valuesAssignment_0");
			builder.put(grammarAccess.getOutputAccess().getR_valuesAssignment_1_1(), "rule__Output__R_valuesAssignment_1_1");
			builder.put(grammarAccess.getCommandsAccess().getCommandAssignment_0(), "rule__Commands__CommandAssignment_0");
			builder.put(grammarAccess.getCommandsAccess().getCommandAssignment_1_1(), "rule__Commands__CommandAssignment_1_1");
			builder.put(grammarAccess.getCommandAccess().getNopAssignment_0(), "rule__Command__NopAssignment_0");
			builder.put(grammarAccess.getCommandAccess().getAssignAssignment_1(), "rule__Command__AssignAssignment_1");
			builder.put(grammarAccess.getCommandAccess().getWhAssignment_2(), "rule__Command__WhAssignment_2");
			builder.put(grammarAccess.getCommandAccess().getForAssignment_3(), "rule__Command__ForAssignment_3");
			builder.put(grammarAccess.getCommandAccess().getIfAssignment_4(), "rule__Command__IfAssignment_4");
			builder.put(grammarAccess.getCommandAccess().getForeachAssignment_5(), "rule__Command__ForeachAssignment_5");
			builder.put(grammarAccess.getAssignAccess().getVarsAssignment_0(), "rule__Assign__VarsAssignment_0");
			builder.put(grammarAccess.getAssignAccess().getExprsAssignment_2(), "rule__Assign__ExprsAssignment_2");
			builder.put(grammarAccess.getWhileAccess().getCondAssignment_1(), "rule__While__CondAssignment_1");
			builder.put(grammarAccess.getWhileAccess().getCommandsAssignment_3(), "rule__While__CommandsAssignment_3");
			builder.put(grammarAccess.getForAccess().getCondAssignment_1(), "rule__For__CondAssignment_1");
			builder.put(grammarAccess.getForAccess().getCommandsAssignment_3(), "rule__For__CommandsAssignment_3");
			builder.put(grammarAccess.getIfAccess().getCondAssignment_1(), "rule__If__CondAssignment_1");
			builder.put(grammarAccess.getIfAccess().getIf_commandsAssignment_3(), "rule__If__If_commandsAssignment_3");
			builder.put(grammarAccess.getIfAccess().getElse_commandsAssignment_4_1(), "rule__If__Else_commandsAssignment_4_1");
			builder.put(grammarAccess.getForeachAccess().getExprAssignment_1(), "rule__Foreach__ExprAssignment_1");
			builder.put(grammarAccess.getForeachAccess().getE2Assignment_3(), "rule__Foreach__E2Assignment_3");
			builder.put(grammarAccess.getForeachAccess().getCommandsAssignment_5(), "rule__Foreach__CommandsAssignment_5");
			builder.put(grammarAccess.getVarsAccess().getVarAssignment_0(), "rule__Vars__VarAssignment_0");
			builder.put(grammarAccess.getVarsAccess().getVarAssignment_1_1(), "rule__Vars__VarAssignment_1_1");
			builder.put(grammarAccess.getExprsAccess().getEAssignment_0(), "rule__Exprs__EAssignment_0");
			builder.put(grammarAccess.getExprsAccess().getEAssignment_1_1(), "rule__Exprs__EAssignment_1_1");
			builder.put(grammarAccess.getExprAccess().getEaAssignment(), "rule__Expr__EaAssignment");
			builder.put(grammarAccess.getExprSimpleAccess().getNilAssignment_0(), "rule__ExprSimple__NilAssignment_0");
			builder.put(grammarAccess.getExprSimpleAccess().getVarAssignment_1(), "rule__ExprSimple__VarAssignment_1");
			builder.put(grammarAccess.getExprSimpleAccess().getSymAssignment_2(), "rule__ExprSimple__SymAssignment_2");
			builder.put(grammarAccess.getExprSimpleAccess().getCons_expAssignment_3_2(), "rule__ExprSimple__Cons_expAssignment_3_2");
			builder.put(grammarAccess.getExprSimpleAccess().getList_expAssignment_4_2(), "rule__ExprSimple__List_expAssignment_4_2");
			builder.put(grammarAccess.getExprSimpleAccess().getHd_exprAssignment_5_2(), "rule__ExprSimple__Hd_exprAssignment_5_2");
			builder.put(grammarAccess.getExprSimpleAccess().getTl_exprAssignment_6_2(), "rule__ExprSimple__Tl_exprAssignment_6_2");
			builder.put(grammarAccess.getExprAndAccess().getEoAssignment_0(), "rule__ExprAnd__EoAssignment_0");
			builder.put(grammarAccess.getExprAndAccess().getEoAssignment_1_1(), "rule__ExprAnd__EoAssignment_1_1");
			builder.put(grammarAccess.getExprOrAccess().getEnAssignment_0(), "rule__ExprOr__EnAssignment_0");
			builder.put(grammarAccess.getExprOrAccess().getEnAssignment_1_1(), "rule__ExprOr__EnAssignment_1_1");
			builder.put(grammarAccess.getExprNotAccess().getEAssignment_0_1(), "rule__ExprNot__EAssignment_0_1");
			builder.put(grammarAccess.getExprNotAccess().getE2Assignment_1(), "rule__ExprNot__E2Assignment_1");
			builder.put(grammarAccess.getExprEqAccess().getEAssignment_0_0(), "rule__ExprEq__EAssignment_0_0");
			builder.put(grammarAccess.getExprEqAccess().getE2Assignment_0_1_1(), "rule__ExprEq__E2Assignment_0_1_1");
			builder.put(grammarAccess.getLExprAccess().getLeAssignment(), "rule__LExpr__LeAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private WhGrammarAccess grammarAccess;

	@Override
	protected InternalWhParser createParser() {
		InternalWhParser result = new InternalWhParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public WhGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(WhGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
