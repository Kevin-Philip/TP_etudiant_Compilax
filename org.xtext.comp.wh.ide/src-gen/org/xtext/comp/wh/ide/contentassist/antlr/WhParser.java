/*
 * generated by Xtext 2.15.0
 */
package org.xtext.comp.wh.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.comp.wh.ide.contentassist.antlr.internal.InternalWhParser;
import org.xtext.comp.wh.services.WhGrammarAccess;

public class WhParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(WhGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, WhGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
			builder.put(grammarAccess.getExprSimpleAccess().getAlternatives(), "rule__ExprSimple__Alternatives");
			builder.put(grammarAccess.getExprNotAccess().getAlternatives(), "rule__ExprNot__Alternatives");
			builder.put(grammarAccess.getExprEqAccess().getAlternatives(), "rule__ExprEq__Alternatives");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup_1(), "rule__Input__Group_1__0");
			builder.put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
			builder.put(grammarAccess.getOutputAccess().getGroup_1(), "rule__Output__Group_1__0");
			builder.put(grammarAccess.getCommandsAccess().getGroup(), "rule__Commands__Group__0");
			builder.put(grammarAccess.getCommandsAccess().getGroup_1(), "rule__Commands__Group_1__0");
			builder.put(grammarAccess.getAssignAccess().getGroup(), "rule__Assign__Group__0");
			builder.put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
			builder.put(grammarAccess.getForAccess().getGroup(), "rule__For__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup_4(), "rule__If__Group_4__0");
			builder.put(grammarAccess.getForeachAccess().getGroup(), "rule__Foreach__Group__0");
			builder.put(grammarAccess.getVarsAccess().getGroup(), "rule__Vars__Group__0");
			builder.put(grammarAccess.getVarsAccess().getGroup_1(), "rule__Vars__Group_1__0");
			builder.put(grammarAccess.getExprsAccess().getGroup(), "rule__Exprs__Group__0");
			builder.put(grammarAccess.getExprsAccess().getGroup_1(), "rule__Exprs__Group_1__0");
			builder.put(grammarAccess.getExprSimpleAccess().getGroup_3(), "rule__ExprSimple__Group_3__0");
			builder.put(grammarAccess.getExprSimpleAccess().getGroup_4(), "rule__ExprSimple__Group_4__0");
			builder.put(grammarAccess.getExprSimpleAccess().getGroup_5(), "rule__ExprSimple__Group_5__0");
			builder.put(grammarAccess.getExprSimpleAccess().getGroup_6(), "rule__ExprSimple__Group_6__0");
			builder.put(grammarAccess.getExprAndAccess().getGroup(), "rule__ExprAnd__Group__0");
			builder.put(grammarAccess.getExprAndAccess().getGroup_1(), "rule__ExprAnd__Group_1__0");
			builder.put(grammarAccess.getExprOrAccess().getGroup(), "rule__ExprOr__Group__0");
			builder.put(grammarAccess.getExprOrAccess().getGroup_1(), "rule__ExprOr__Group_1__0");
			builder.put(grammarAccess.getExprNotAccess().getGroup_0(), "rule__ExprNot__Group_0__0");
			builder.put(grammarAccess.getExprEqAccess().getGroup_0(), "rule__ExprEq__Group_0__0");
			builder.put(grammarAccess.getExprEqAccess().getGroup_0_1(), "rule__ExprEq__Group_0_1__0");
			builder.put(grammarAccess.getExprEqAccess().getGroup_1(), "rule__ExprEq__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getTextAssignment(), "rule__Model__TextAssignment");
			builder.put(grammarAccess.getProgramAccess().getFunctionsAssignment(), "rule__Program__FunctionsAssignment");
			builder.put(grammarAccess.getFunctionAccess().getFunction_nameAssignment_1(), "rule__Function__Function_nameAssignment_1");
			builder.put(grammarAccess.getFunctionAccess().getDAssignment_3(), "rule__Function__DAssignment_3");
			builder.put(grammarAccess.getDefinitionAccess().getIAssignment_1(), "rule__Definition__IAssignment_1");
			builder.put(grammarAccess.getDefinitionAccess().getCAssignment_3(), "rule__Definition__CAssignment_3");
			builder.put(grammarAccess.getDefinitionAccess().getOAssignment_6(), "rule__Definition__OAssignment_6");
			builder.put(grammarAccess.getInputAccess().getVAssignment_0(), "rule__Input__VAssignment_0");
			builder.put(grammarAccess.getInputAccess().getV2Assignment_1_1(), "rule__Input__V2Assignment_1_1");
			builder.put(grammarAccess.getOutputAccess().getVAssignment_0(), "rule__Output__VAssignment_0");
			builder.put(grammarAccess.getOutputAccess().getV2Assignment_1_1(), "rule__Output__V2Assignment_1_1");
			builder.put(grammarAccess.getCommandsAccess().getCAssignment_0(), "rule__Commands__CAssignment_0");
			builder.put(grammarAccess.getCommandsAccess().getC2Assignment_1_1(), "rule__Commands__C2Assignment_1_1");
			builder.put(grammarAccess.getCommandAccess().getNopAssignment_0(), "rule__Command__NopAssignment_0");
			builder.put(grammarAccess.getCommandAccess().getAssignAssignment_1(), "rule__Command__AssignAssignment_1");
			builder.put(grammarAccess.getCommandAccess().getWhileAssignment_2(), "rule__Command__WhileAssignment_2");
			builder.put(grammarAccess.getCommandAccess().getForAssignment_3(), "rule__Command__ForAssignment_3");
			builder.put(grammarAccess.getCommandAccess().getIfAssignment_4(), "rule__Command__IfAssignment_4");
			builder.put(grammarAccess.getCommandAccess().getForeachAssignment_5(), "rule__Command__ForeachAssignment_5");
			builder.put(grammarAccess.getAssignAccess().getVAssignment_0(), "rule__Assign__VAssignment_0");
			builder.put(grammarAccess.getAssignAccess().getEAssignment_2(), "rule__Assign__EAssignment_2");
			builder.put(grammarAccess.getWhileAccess().getEAssignment_1(), "rule__While__EAssignment_1");
			builder.put(grammarAccess.getWhileAccess().getCAssignment_3(), "rule__While__CAssignment_3");
			builder.put(grammarAccess.getForAccess().getEAssignment_1(), "rule__For__EAssignment_1");
			builder.put(grammarAccess.getForAccess().getCAssignment_3(), "rule__For__CAssignment_3");
			builder.put(grammarAccess.getIfAccess().getEAssignment_1(), "rule__If__EAssignment_1");
			builder.put(grammarAccess.getIfAccess().getCAssignment_3(), "rule__If__CAssignment_3");
			builder.put(grammarAccess.getIfAccess().getC2Assignment_4_1(), "rule__If__C2Assignment_4_1");
			builder.put(grammarAccess.getForeachAccess().getEAssignment_1(), "rule__Foreach__EAssignment_1");
			builder.put(grammarAccess.getForeachAccess().getE2Assignment_3(), "rule__Foreach__E2Assignment_3");
			builder.put(grammarAccess.getForeachAccess().getCAssignment_5(), "rule__Foreach__CAssignment_5");
			builder.put(grammarAccess.getVarsAccess().getVAssignment_0(), "rule__Vars__VAssignment_0");
			builder.put(grammarAccess.getVarsAccess().getV2Assignment_1_1(), "rule__Vars__V2Assignment_1_1");
			builder.put(grammarAccess.getExprsAccess().getEAssignment_0(), "rule__Exprs__EAssignment_0");
			builder.put(grammarAccess.getExprsAccess().getE2Assignment_1_1(), "rule__Exprs__E2Assignment_1_1");
			builder.put(grammarAccess.getExprAccess().getEaAssignment(), "rule__Expr__EaAssignment");
			builder.put(grammarAccess.getExprSimpleAccess().getNilAssignment_0(), "rule__ExprSimple__NilAssignment_0");
			builder.put(grammarAccess.getExprSimpleAccess().getVarAssignment_1(), "rule__ExprSimple__VarAssignment_1");
			builder.put(grammarAccess.getExprSimpleAccess().getSymAssignment_2(), "rule__ExprSimple__SymAssignment_2");
			builder.put(grammarAccess.getExprSimpleAccess().getE3Assignment_3_2(), "rule__ExprSimple__E3Assignment_3_2");
			builder.put(grammarAccess.getExprSimpleAccess().getE4Assignment_4_2(), "rule__ExprSimple__E4Assignment_4_2");
			builder.put(grammarAccess.getExprSimpleAccess().getE5Assignment_5_2(), "rule__ExprSimple__E5Assignment_5_2");
			builder.put(grammarAccess.getExprSimpleAccess().getE6Assignment_6_2(), "rule__ExprSimple__E6Assignment_6_2");
			builder.put(grammarAccess.getExprAndAccess().getEoAssignment_0(), "rule__ExprAnd__EoAssignment_0");
			builder.put(grammarAccess.getExprAndAccess().getEo2Assignment_1_1(), "rule__ExprAnd__Eo2Assignment_1_1");
			builder.put(grammarAccess.getExprOrAccess().getEnAssignment_0(), "rule__ExprOr__EnAssignment_0");
			builder.put(grammarAccess.getExprOrAccess().getEn2Assignment_1_1(), "rule__ExprOr__En2Assignment_1_1");
			builder.put(grammarAccess.getExprNotAccess().getEAssignment_0_1(), "rule__ExprNot__EAssignment_0_1");
			builder.put(grammarAccess.getExprNotAccess().getE2Assignment_1(), "rule__ExprNot__E2Assignment_1");
			builder.put(grammarAccess.getExprEqAccess().getEAssignment_0_0(), "rule__ExprEq__EAssignment_0_0");
			builder.put(grammarAccess.getExprEqAccess().getE2Assignment_0_1_1(), "rule__ExprEq__E2Assignment_0_1_1");
			builder.put(grammarAccess.getLExprAccess().getE1Assignment(), "rule__LExpr__E1Assignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private WhGrammarAccess grammarAccess;

	@Override
	protected InternalWhParser createParser() {
		InternalWhParser result = new InternalWhParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public WhGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(WhGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
